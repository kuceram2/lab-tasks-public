def ability():
  global _hidden_verificationVariable=0
  step_count_d0be5250_c275_445f_86b8_1904eaa00685 = 0.0
  thread Step_Counter_Thread_e430f2e8_d9f9_487b_9af9_70a807ddffd7():
    while (True):
      step_count_d0be5250_c275_445f_86b8_1904eaa00685 = step_count_d0be5250_c275_445f_86b8_1904eaa00685 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_e430f2e8_d9f9_487b_9af9_70a807ddffd7()
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_target_payload(2.090000, [0.015000, -0.005000, 0.047000], [0.005259, 0.005259, 0.005259, 0.000000, 0.000000, 0.000000])
  set_gravity([0.0, 0.0, 9.82])
  set_safety_mode_transition_hardness(1)
  set_tcp(p[0.0,0.0,0.165,-1.57,0.0,0.0])
  set_tool_communication(True, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(24)
  global Pallet_ref=p[0.23673981765789284,-0.611972183808765,0.18903732227235456,-2.141026582984071,2.2897807452097325,0.016012414057338102]
  global Plane_1=p[-0.5129535891710651,0.25444119741538135,-0.1324893827077966,-1.8235774634742783,2.52994362328933,-0.03128765746542372]
  global Unload_ref=p[0.41951857232416634,-0.6276001084527416,0.19064087324443962,2.298941266052505,-2.094963843603307,-0.026024890576082926]
  global referencePoin_1=p[0.3302161821107999,-0.6547625956979264,0.14667608988337466,2.3106327262625443,-2.073456813515827,-0.009785998864890504]
  global referencePoin_6=p[0.14574245649996245,-0.6237122997166271,0.14184336367685513,-2.162912830714426,2.2784643501671926,1.688362743749939E-5]
  global referencePoin_7=p[0.52022680893046,0.07193616016490022,-0.4398165993312858,3.141509651509224,0.01555115723193239,1.0800257741387076E-5]
  global referencePoint=p[0.52022680893046,0.07193616016490022,-0.4398165993312858,3.141509651509224,0.01555115723193239,1.0800257741387076E-5]
  global separatorPoin_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global separatorPoin_6=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global separatorPoin_7=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global separatorPoint=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: UR Connect, 1.13.79, Universal Robots
  #   Type: UR Connect
  myurRPC = rpc_factory("xmlrpc","http://127.0.0.1:40474")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
  #   Type: Vacuum
  #################################################
  # Vacuum Grip Check
  #################################################
  
  vacuumGripCheckThread1 = 0
  vacuumGripCheckThread2 = 0
  vacuumGripCheckThread3 = 0
  vacuumGripCheckThread4 = 0
  vacuumGripCheckThread1Running = False
  vacuumGripCheckThread2Running = False
  vacuumGripCheckThread3Running = False
  vacuumGripCheckThread4Running = False
  vacuumGripCheckSocketId = "1"
  vacuumGripCheckThreadStarted = False
  
  thread vacuumGripCheck():
    gripper_socket = vacuumGripCheckSocketId
    vacuumGripCheckThreadStarted = True
  
    while (True):
      objectDetectedDebounceCtr = 0
  
      while (objectDetectedDebounceCtr < 3):
        if(rq_is_vacuum_obj_detected(gripper_socket="1")):
          objectDetectedDebounceCtr = objectDetectedDebounceCtr + 1
        else:
          objectDetectedDebounceCtr = 0
        end
        sleep(0.1)
      end
  
      objectNotDetectedDebounceCtr = 0
  
      while objectNotDetectedDebounceCtr < 3:
        if (not rq_is_vacuum_obj_detected(gripper_socket="1")):
          objectNotDetectedDebounceCtr = objectNotDetectedDebounceCtr + 1
        else:
          objectNotDetectedDebounceCtr = 0
        end
        sleep(0.1)
      end
  
      socket_open("127.0.0.1",29999,"dashboardServerSocket")
      socket_send_line("pause","dashboardServerSocket")
      socket_send_string("popup Vacuum grip check has detected an object drop.", "dashboardServerSocket")
      socket_send_byte(10, "dashboardServerSocket")
      socket_close("dashboardServerSocket")
  
      sleep(0.008)
    end
  end
  
  def startVacuumGripCheckThread(gripperId="1"):
    vacuumGripCheckSocketId = gripperId
    threadHandle = run vacuumGripCheck()
    waitForVacuumGripCheckThreadStarted()
    return threadHandle
  end
  
  def stopVacuumGripCheckThread(threadHandle):
    kill threadHandle
  end
  
  def waitForVacuumGripCheckThreadStarted():
    while (not(vacuumGripCheckThreadStarted)):
      sleep(0.008)
    end
    vacuumGripCheckThreadStarted = False
  end
  #################################################
  # End - Vacuum Grip Check
  #################################################
  
  #################################################
  # Stops the pump on a distance travelled
  #################################################
  global stopPumpDistance = 100
  global stopPumpSocketId = "0"
  global stopPumpThreadStarted = [False, False, False, False]
  global stopPumpThreadHandles = [0, 0, 0, 0]
  
  thread stopPumpOnDistanceTravelled():
    distance = stopPumpDistance
    socketId = stopPumpSocketId
    stopPumpThreadStarted[rq_socket_to_index(socketId)] = True
  
    measuredDistance = waitForDistanceTravelled(distance)
  
    rq_stop(socketId)
  
    stopPumpThreadStarted[rq_socket_to_index(socketId)] = False
  end
  
  def waitForDistanceTravelled(distance):
    startingPose = get_actual_tcp_pose()
    measuredDistance = 0
    while (measuredDistance < distance):
      sleep(0.1)
      measuredDistance = point_dist(get_actual_tcp_pose(), startingPose)
    end
  
    return measuredDistance
  end
  
  def startStopPumpOnDistanceTravelledThread(distance, gripper_socket="1"):
    if (stopPumpThreadStarted[rq_socket_to_index(gripper_socket)]):
      return 0
    end
  
    global stopPumpDistance = distance
    global stopPumpSocketId = gripper_socket
    stopPumpThreadHandles[rq_socket_to_index(gripper_socket)] = run stopPumpOnDistanceTravelled()
    waitForStopPumpOnDistanceTravelledThreadStarted(gripper_socket)
    return stopPumpThreadHandles[rq_socket_to_index(gripper_socket)]
  end
  
  def waitForStopPumpOnDistanceTravelledThreadStarted(gripper_socket="1"):
    while (not(stopPumpThreadStarted[rq_socket_to_index(gripper_socket)])):
      sleep(0.008)
    end
  end
  
  def stopStopPumpOnDistanceTravelledThread(gripper_socket="1"):
    handle = stopPumpThreadHandles[rq_socket_to_index(gripper_socket)]
    threadIsRunning = stopPumpThreadStarted[rq_socket_to_index(gripper_socket)]
    if (threadIsRunning):
      kill handle
      clear_socket_buffer(gripper_socket, 0.01)
      stopPumpThreadHandles[rq_socket_to_index(gripper_socket)] = 0
    end
  end
  #################################################
  # End - Stops the pump on a distance travelled
  #################################################
  
  #################################################
  # Vacuum general functions
  #################################################
  def rq_wait_for_vacuum_object_detected(gripper_socket="1"):
      while (not rq_is_vacuum_obj_detected(gripper_socket)):
          if (rq_is_vacuum_timeout(gripper_socket)):
              return False
          end
          sleep(0.008)
      end
      return True
  end
  
  def rq_wait_for_vacuum_object_secured(gripper_socket="1"):
      while (not rq_is_vacuum_obj_secured(gripper_socket)):
          if (rq_is_vacuum_timeout(gripper_socket)):
              return False
          end
          sleep(0.008)
      end
      return True
  end
  
  def rq_wait_for_vacuum_object_suction_complete(gripper_socket="1"):
      remaining_retries = 50
  
       # Wait for suction started
      while (not rq_is_vacuum_obj_in_suction(gripper_socket) and
             not rq_is_vacuum_obj_detected(gripper_socket) and
             remaining_retries > 0):
          sleep(0.01)
          remaining_retries = remaining_retries - 1
      end
  
      # Wait for suction completed
      while (rq_is_vacuum_obj_in_suction(gripper_socket)):
          if (rq_is_vacuum_timeout(gripper_socket)):
              return False
          end
          sleep(0.01)
      end
  
      return True
  end
  
  def rq_wait_for_vacuum_object_not_detected(gripper_socket="1"):
      while (rq_is_vacuum_obj_detected(gripper_socket)):
          sleep(0.01)
      end
  end
  
  def rq_is_vacuum_obj_detected(gripper_socket="1"):
      gOBJ = rq_get_var("OBJ", 1, gripper_socket)
      sleep(0.008)
      return is_vacuum_OBJ_object_detected(gOBJ)
  end
  
  def rq_is_vacuum_obj_secured(gripper_socket="1"):
      gOBJ = rq_get_var("OBJ", 1, gripper_socket)
      sleep(0.008)
      return is_vacuum_OBJ_object_secured(gOBJ)
  end
  
  def rq_is_vacuum_obj_in_suction(gripper_socket="1"):
      gOBJ = rq_get_var("OBJ", 1, gripper_socket)
      sleep(0.008)
  
      if(is_vacuum_OBJ_object_in_motion(gOBJ)):
          return True
      else:
          return False
      end
  end
  
  def rq_is_vacuum_timeout(gripper_socket="1"):
      gFLT = rq_get_var("FLT", 2, gripper_socket)
      sleep(0.008)
  
      if(gFLT ==6):
          return True
      end
  
      return False
  end
  
  def is_vacuum_OBJ_object_in_motion(gOBJ):
      if (gOBJ == 0):
          return True
      end
  
      return False
  end
  
  def is_vacuum_OBJ_object_detected(gOBJ):
      if (gOBJ == 1 or gOBJ == 2):
          return True
      end
  
      return False
  end
  
  def is_vacuum_OBJ_object_secured(gOBJ):
      if (gOBJ == 2):
          return True
      end
  
      return False
  end
  
  def rq_set_pressure_timeout_minimum_vacuum(pressure, timeout, minimum, gripper_socket="1"):
      rq_set_pos_spd_for(pressure, timeout, minimum, gripper_socket)
  end
  
  def rq_set_vacuum_and_wait(pressure, timeout, minimum, mode, gripper_socket="1"):
      rq_set_pressure_timeout_minimum_vacuum(pressure, timeout, minimum, gripper_socket)
      gPRE = rq_get_var("PRE", 3, gripper_socket)
      while (gPRE != pressure):
          rq_set_pressure_timeout_minimum_vacuum(pressure, timeout, minimum, gripper_socket)
          sleep(0.008)
          gPRE = rq_get_var("PRE", 3, gripper_socket)
      end
  
      rq_set_gripper_mode(mode, gripper_socket)
      gMOD = rq_get_var("MOD", 3, gripper_socket)
      while (gMOD != mode):
          rq_set_gripper_mode(mode, gripper_socket)
          sleep(0.008)
          gMOD = rq_get_var("MOD", 3, gripper_socket)
     end
  end
  
  def is_FLT_vacuum_timeout(gFLT):
    if (gFLT == 6):
        return True
    end
  
    return False
  end
  
  def is_continuous_grip(maximum_vacuum):
    return maximum_vacuum == 0
  end
  
  def rq_vacuum_release(advanced_mode=False, shutoff_distance_cm=5, wait_for_object_released=True, gripper_socket="1"):
    local shutoff_distance = scale(shutoff_distance_cm, [0, 99], [0.00, 0.99])
    local pressure = 255
    local minimum = 0
    local timeout = 255
    rq_vacuum_release_raw(advanced_mode, pressure, minimum, timeout, shutoff_distance, wait_for_object_released, gripper_socket)
  end
  
  def rq_vacuum_release_raw(advanced_mode, pressure, minimum, timeout, shutoff_distance, wait_for_object_released, gripper_socket):
    rq_reset_fault_and_activate(gripper_socket)
  
    if advanced_mode:
      rq_set_vacuum_and_wait(pressure, timeout, minimum, 1, gripper_socket)
    else:
      rq_set_vacuum_and_wait(pressure, timeout, minimum, 0, gripper_socket)
    end
  
    # The following patch is for Robotiq's Camera issue when communication is lost, but not the activation
    # the communication driver reset the GTO bit
    rq_set_GTO_and_wait(1, gripper_socket)
  
    if wait_for_object_released:
      while (rq_is_vacuum_obj_detected(gripper_socket)):
  
        if advanced_mode:
          rq_set_vacuum_and_wait(pressure, timeout, minimum, 1, gripper_socket)
        else:
          rq_set_vacuum_and_wait(pressure, timeout, minimum, 0, gripper_socket)
        end
  
        # The following patch is for Robotiq's Camera issue when communication is lost, but not the activation
        # the communication driver reset the GTO bit
        rq_set_GTO_and_wait(1, gripper_socket)
        sleep(0.01)
      end
    end
  
    if advanced_mode:
      startStopPumpOnDistanceTravelledThread(shutoff_distance, gripper_socket)
    end
  end
  
  def rq_vacuum_grip(advanced_mode=False, maximum_vacuum=60, minimum_vacuum=40, timeout_ms=3000, wait_for_object_detected=True, gripper_socket="1"):
    local pressure = scale(maximum_vacuum, [0, 100], [100, 0])
    local minimum = scale(minimum_vacuum, [0, 100], [100, 0])
    local timeout = scale(timeout_ms, [0, 25500], [0, 255])
    rq_vacuum_grip_raw(advanced_mode, pressure, minimum, timeout, gripper_socket)
    if wait_for_object_detected:
          suction_completed = rq_wait_for_vacuum_object_suction_complete(gripper_socket)
          if(not suction_completed):
              rq_set_var("GTO", 0, gripper_socket)
          end
    end
  end
  
  def rq_vacuum_grip_raw(advanced_mode, pressure, minimum, timeout, gripper_socket):
    stopStopPumpOnDistanceTravelledThread(gripper_socket)
    rq_reset_fault_and_activate(gripper_socket)
  
    if advanced_mode:
      rq_set_vacuum_and_wait(pressure, timeout, minimum, 1, gripper_socket)
    else:
      rq_set_vacuum_and_wait(pressure, timeout, minimum, 0, gripper_socket)
    end
  
    rq_set_GTO_and_wait(1, gripper_socket)
  end
  
  def rq_reset_fault_and_activate(gripper_socket):
      gFLT = rq_get_var("FLT", 2, gripper_socket)
  
      if(not is_FLT_no_fault(gFLT)):
          if(is_FLT_vacuum_timeout(gFLT)):
              rq_set_GTO_and_wait(0, gripper_socket)
          elif(is_FLT_faulted(gFLT)):
              rq_set_GTO_and_wait(0, gripper_socket)
              rq_set_var("ACT", 1, gripper_socket)
          end
      elif(not rq_is_gripper_activated(gripper_socket)):
          rq_set_GTO_and_wait(0, gripper_socket)
          rq_set_var("ACT", 1, gripper_socket)
      end
  end
  #################################################
  # End - Vacuum general functions
  #################################################
  vacuumGripCheckWarningTitle = "Vacuum grip check"
  vacuumGripCheckWarningMessage = "Vacuum gripper object lost"
  vacuumGripTimeoutTitle = "Vacuum gripper fault"
  vacuumGripTimeoutMessage = "Grip has timed out"
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
  #   Type: Gripper
  rq_gripper_socket_ip_address = "127.0.0.1"
  rq_gripper_socket_port = 63352
  
  rq_comm_check_fail_counter = [0, 0, 0, 0]
  
  rq_read_act = [-1, -1, -1, -1]
  rq_read_gto = [-1, -1, -1, -1]
  rq_read_for = [-1, -1, -1, -1]
  rq_read_spe = [-1, -1, -1, -1]
  rq_read_obj = [-1, -1, -1, -1]
  rq_read_sta = [-1, -1, -1, -1]
  rq_read_flt = [-1, -1, -1, -1]
  rq_read_pos = [-1, -1, -1, -1]
  rq_read_pre = [-1, -1, -1, -1]
  rq_read_lbp = [-1, -1, -1, -1]
  rq_read_lrd = [-1, -1, -1, -1]
  rq_read_lbl = [-1, -1, -1, -1]
  rq_read_lgn = [-1, -1, -1, -1]
  rq_read_msc = [-1, -1, -1, -1]
  rq_read_mod = [-1, -1, -1, -1]
  rq_read_cou = [-1, -1, -1, -1]
  rq_read_ncy = [-1, -1, -1, -1]
  rq_read_dst = [-1, -1, -1, -1]
  rq_read_pco = [-1, -1, -1, -1]
  
  rq_string_initial_value = "N/A"
  
  rq_read_snu_1 = rq_string_initial_value
  rq_read_snu_2 = rq_string_initial_value
  rq_read_snu_3 = rq_string_initial_value
  rq_read_snu_4 = rq_string_initial_value
  
  rq_read_fwv_1 = rq_string_initial_value
  rq_read_fwv_2 = rq_string_initial_value
  rq_read_fwv_3 = rq_string_initial_value
  rq_read_fwv_4 = rq_string_initial_value
  
  rq_read_ver_1 = rq_string_initial_value
  rq_read_ver_2 = rq_string_initial_value
  rq_read_ver_3 = rq_string_initial_value
  rq_read_ver_4 = rq_string_initial_value
  
  rq_read_act_req = [True, True, True, True]
  rq_read_gto_req = [True, True, True, True]
  rq_read_for_req = [True, True, True, True]
  rq_read_spe_req = [True, True, True, True]
  rq_read_obj_req = [True, True, True, True]
  rq_read_sta_req = [True, True, True, True]
  rq_read_flt_req = [True, True, True, True]
  rq_read_pos_req = [True, True, True, True]
  rq_read_pre_req = [True, True, True, True]
  rq_read_lbp_req = [True, True, True, True]
  rq_read_lrd_req = [True, True, True, True]
  rq_read_lbl_req = [True, True, True, True]
  rq_read_lgn_req = [True, True, True, True]
  rq_read_msc_req = [True, True, True, True]
  rq_read_mod_req = [True, True, True, True]
  rq_read_cou_req = [True, True, True, True]
  rq_read_ncy_req = [True, True, True, True]
  rq_read_dst_req = [True, True, True, True]
  rq_read_pco_req = [True, True, True, True]
  
  rq_read_snu_1_req = False
  rq_read_snu_2_req = False
  rq_read_snu_3_req = False
  rq_read_snu_4_req = False
  
  rq_read_fwv_1_req = False
  rq_read_fwv_2_req = False
  rq_read_fwv_3_req = False
  rq_read_fwv_4_req = False
  
  rq_read_ver_1_req = False
  rq_read_ver_2_req = False
  rq_read_ver_3_req = False
  rq_read_ver_4_req = False
  
  rq_write_act_request = [False, False, False, False]
  rq_write_gto_request = [False, False, False, False]
  rq_write_atr_request = [False, False, False, False]
  rq_write_ard_request = [False, False, False, False]
  rq_write_pos_request = [False, False, False, False]
  rq_write_lbp_request = [False, False, False, False]
  rq_write_lrd_request = [False, False, False, False]
  rq_write_lbl_request = [False, False, False, False]
  rq_write_lgn_request = [False, False, False, False]
  rq_write_msc_request = [False, False, False, False]
  rq_write_mod_request = [False, False, False, False]
  
  rq_write_act = [-1, -1, -1, -1]
  rq_write_gto = [-1, -1, -1, -1]
  rq_write_atr = [-1, -1, -1, -1]
  rq_write_ard = [-1, -1, -1, -1]
  rq_write_for = [-1, -1, -1, -1]
  rq_write_spe = [-1, -1, -1, -1]
  rq_write_pos = [-1, -1, -1, -1]
  rq_write_lbp = [-1, -1, -1, -1]
  rq_write_lrd = [-1, -1, -1, -1]
  rq_write_lbl = [-1, -1, -1, -1]
  rq_write_lgn = [-1, -1, -1, -1]
  rq_write_msc = [-1, -1, -1, -1]
  rq_write_mod = [-1, -1, -1, -1]
  
  rq_write_act_previous = rq_write_act
  rq_write_gto_previous = rq_write_gto
  rq_write_atr_previous = rq_write_atr
  rq_write_ard_previous = rq_write_ard
  rq_write_for_previous = rq_write_for
  rq_write_spe_previous = rq_write_spe
  rq_write_pos_previous = rq_write_pos
  rq_write_lbp_previous = rq_write_lbp
  rq_write_lrd_previous = rq_write_lrd
  rq_write_lbl_previous = rq_write_lbl
  rq_write_lgn_previous = rq_write_lgn
  rq_write_msc_previous = rq_write_msc
  rq_write_mod_previous = rq_write_mod
  
  gripper_connected = [False, False, False, False]
  gripper_socket_open = [False, False, False, False]
  rq_comm_clear_socket_buffer_enabled = [True, True, True, True]
  rq_comm_check_counter = 0
  rq_gripper_communication_thread_started = False
  
  thread rq_gripper_communication():
      rq_comm_read_constants()
      rq_comm_read_variables()
      rq_comm_initialize_write_values()
  
      while(True):
          rq_comm_clear_socket_buffer()
          rq_comm_check()
          rq_comm_read_variables()
          rq_comm_write_variables()
  
          rq_gripper_communication_thread_started = True
          sleep(0.008)
      end
  end
  
  def rq_socket_to_index(gripper_socket="1"):
      # Patch in case gripper_socket is an integer
      gripper_socket_string = str_cat("", gripper_socket)
  
      if(gripper_socket_string == "1"):
          return 0
      elif(gripper_socket_string == "2"):
          return 1
      elif(gripper_socket_string == "3"):
          return 2
      elif(gripper_socket_string == "4"):
          return 3
      end
      return 0
  end
  
  def rq_index_to_socket(index=0):
      if(index == 0):
          return "1"
      elif(index == 1):
          return "2"
      elif(index == 2):
          return "3"
      elif(index == 3):
          return "4"
      end
      return "1"
  end
  
  def rq_comm_check():
      index = 0
      rq_comm_check_fail_counter_max = 99999
  
      if(rq_comm_check_counter < 50):
          rq_comm_check_counter = rq_comm_check_counter + 1
      else:
          rq_comm_check_counter = 0
  
          while(index <= 3):
              socket = rq_index_to_socket(index)
  
              if(gripper_connected[index]):
                  # Patch in case gripper_socket is an integer
                  gripper_socket_string = str_cat("", socket)
  
                  sid_list = rq_get_sid(socket)
                  is_gripper_in_sid_list = rq_is_gripper_in_sid_list(gripper_socket_string, sid_list)
  
                  if(is_gripper_in_sid_list):
                      rq_comm_check_fail_counter[index] = 0
                  else:
                      rq_comm_check_fail_counter[index] = rq_comm_check_fail_counter[index] + 1
                  end
  
                  if(rq_comm_check_fail_counter[index] > rq_comm_check_fail_counter_max):
                      message = str_cat("Communication lost with Robotiq's Gripper Slave ID ", gripper_socket_string)
                      popup(message, "Communication Error", False, True, True)
                  end
              end
              index = index + 1
          end
      end
  end
  
  def rq_init_comm_if_connected(gripper_sid=9, gripper_socket="1"):
      if(not is_gripper_socket_open(gripper_socket)):
        open_gripper_socket(gripper_socket)
      end
  
      socket_sid_set = rq_set_sid(gripper_sid, gripper_socket)
  
      if(socket_sid_set):
          # Patch in case gripper_socket is an integer
          gripper_socket_string = str_cat("", gripper_socket)
  
          sid_list = rq_get_sid(gripper_socket)
          is_gripper_in_sid_list = rq_is_gripper_in_sid_list(gripper_socket_string, sid_list)
  
          if(is_gripper_in_sid_list):
              rq_set_gripper_connected(gripper_socket_string)
              return True
          end
      end
  
      return False
  end
  
  def open_gripper_socket(gripper_socket="1"):
      is_open = socket_open(rq_gripper_socket_ip_address, rq_gripper_socket_port, gripper_socket)
      set_gripper_socket_open(gripper_socket, is_open)
  end
  
  def rq_close_gripper_socket(gripper_socket="1"):
      socket_close(gripper_socket)
      set_gripper_socket_open(gripper_socket, False)
      rq_set_gripper_connected(gripper_socket, False)
  end
  
  
  def is_gripper_socket_open(gripper_socket="1"):
      return gripper_socket_open[rq_socket_to_index(gripper_socket)]
  end
  
  def set_gripper_socket_open(gripper_socket, is_open):
      gripper_socket_open[rq_socket_to_index(gripper_socket)] = is_open
  end
  
  def rq_set_gripper_connected(gripper_socket="1", connected = True):
      gripper_connected[rq_socket_to_index(gripper_socket)] = connected
  end
  
  def rq_is_gripper_connected(gripper_id="1"):
      return gripper_connected[rq_socket_to_index(gripper_id)]
  end
  
  def rq_set_sid(gripper_sid=9, gripper_socket="1"):
      socket_set_var("SID", gripper_sid,  gripper_socket)
      ack = socket_read_byte_list(3, gripper_socket)
      return is_ack(ack)
  end
  
  def rq_get_sid(gripper_socket="1"):
      socket_send_string("GET SID", gripper_socket)
      sid_list = socket_read_byte_list(17, gripper_socket)
      return sid_list
  end
  
  def rq_wait_for_gripper_connected():
      gripper_socket = "gripper_conn_socket"
      socket_open(rq_gripper_socket_ip_address, rq_gripper_socket_port, gripper_socket)
  
      remainingRetries = 2000
      sid_list = rq_get_sid(gripper_socket)
      gripper_is_connected = rq_is_any_gripper_connected(sid_list)
  
      while(not gripper_is_connected and remainingRetries > 0):
          remainingRetries = remainingRetries - 1
          sid_list = rq_get_sid(gripper_socket)
          gripper_is_connected = rq_is_any_gripper_connected(sid_list)
      end
  
      socket_close(gripper_socket)
  end
  
  def rq_is_any_gripper_connected(sid_list):
      is_gripper_1_connected = rq_is_gripper1_in_sid_list(sid_list)
      is_gripper_2_connected = rq_is_gripper2_in_sid_list(sid_list)
      is_gripper_3_connected = rq_is_gripper3_in_sid_list(sid_list)
      is_gripper_4_connected = rq_is_gripper4_in_sid_list(sid_list)
  
      return is_gripper_1_connected or is_gripper_2_connected or is_gripper_3_connected or is_gripper_4_connected
  end
  
  def rq_is_gripper_ascii_in_sid_list(gripper_ascii_sid, sid_list):
      sid_list_length = sid_list[0]
      sid_list_empty_length = 2
  
      if (sid_list_length <= sid_list_empty_length):
          return False
      end
  
      sid1 = sid_list[2]
      sid2 = sid_list[5]
      sid3 = sid_list[8]
      sid4 = sid_list[11]
  
      return sid1 == gripper_ascii_sid or sid2 == gripper_ascii_sid or sid3 == gripper_ascii_sid or sid4 == gripper_ascii_sid
  end
  
  def rq_is_gripper_in_sid_list(gripper_socket_string, sid_list):
      if(gripper_socket_string == "1"):
          return rq_is_gripper1_in_sid_list(sid_list)
      elif(gripper_socket_string == "2"):
          return rq_is_gripper2_in_sid_list(sid_list)
      elif(gripper_socket_string == "3"):
          return rq_is_gripper3_in_sid_list(sid_list)
      elif(gripper_socket_string == "4"):
          return rq_is_gripper4_in_sid_list(sid_list)
      end
      return False
  end
  
  def rq_is_gripper1_in_sid_list(sid_list):
      gripper_1_sid_ascii = 57
      return rq_is_gripper_ascii_in_sid_list(gripper_1_sid_ascii, sid_list)
  end
  
  def rq_is_gripper2_in_sid_list(sid_list):
      gripper_2_sid_ascii = 50
      return rq_is_gripper_ascii_in_sid_list(gripper_2_sid_ascii, sid_list)
  end
  
  def rq_is_gripper3_in_sid_list(sid_list):
      gripper_3_sid_ascii = 51
      return rq_is_gripper_ascii_in_sid_list(gripper_3_sid_ascii, sid_list)
  end
  
  def rq_is_gripper4_in_sid_list(sid_list):
      gripper_4_sid_ascii = 52
      return rq_is_gripper_ascii_in_sid_list(gripper_4_sid_ascii, sid_list)
  end
  
  def rq_comm_clear_socket_buffer():
      index = 0
  
      while(index <= 3):
          socket = rq_index_to_socket(index)
  
          if(gripper_connected[index] and rq_comm_clear_socket_buffer_enabled[index]):
              byte_in_buffer = socket_read_byte_list(1, socket, 0.002)
              while(byte_in_buffer[0] >= 1):
                  byte_in_buffer = socket_read_byte_list(1, socket, 0.002)
              end
              rq_comm_clear_socket_buffer_enabled[index] = False
          end
          index = index + 1
      end
  end
  
  def rq_comm_initialize_write_values():
      index = 0
  
      while(index <= 3):
          socket = rq_index_to_socket(index)
  
          if(gripper_connected[index]):
  
              if(rq_write_act[index] == -1 and rq_read_act[index] != -1):
                  rq_write_act[index] = rq_read_act[index]
                  rq_write_act_previous[index] = rq_read_act[index]
              elif(rq_write_act_previous[index] == -1 and rq_read_act[index] != -1):
                  rq_write_act_previous[index] = rq_read_act[index]
              end
  
              if(rq_write_gto[index] == -1 and rq_read_gto[index] != -1):
                  rq_write_gto[index] = rq_read_gto[index]
                  rq_write_gto_previous[index] = rq_read_gto[index]
              elif(rq_write_gto_previous[index] == -1 and rq_read_gto[index] != -1):
                  rq_write_gto_previous[index] = rq_read_gto[index]
              end
  
              if(rq_write_for[index] == -1 and rq_read_for[index] != -1):
                  rq_write_for[index] = rq_read_for[index]
                  rq_write_for_previous[index] = rq_read_for[index]
              elif(rq_write_for_previous[index] == -1 and rq_read_for[index] != -1):
                  rq_write_for_previous[index] = rq_read_for[index]
              end
  
              if(rq_write_spe[index] == -1 and rq_read_spe[index] != -1):
                  rq_write_spe[index] = rq_read_spe[index]
                  rq_write_spe_previous[index] = rq_read_spe[index]
              elif(rq_write_spe_previous[index] == -1 and rq_read_spe[index] != -1):
                  rq_write_spe_previous[index] = rq_read_spe[index]
              end
  
              if(rq_write_pos[index] == -1 and rq_read_pos[index] != -1):
                  rq_write_pos[index] = rq_read_pos[index]
                  rq_write_pos_previous[index] = rq_read_pos[index]
              elif(rq_write_pos_previous[index] == -1 and rq_read_pos[index] != -1):
                  rq_write_pos_previous[index] = rq_read_pos[index]
              end
  
              if(rq_write_lbp[index] == -1 and rq_read_lbp[index] != -1):
                  rq_write_lbp[index] = rq_read_lbp[index]
                  rq_write_lbp_previous[index] = rq_read_lbp[index]
              elif(rq_write_lbp_previous[index] == -1 and rq_read_lbp[index] != -1):
                  rq_write_lbp_previous[index] = rq_read_lbp[index]
              end
  
              if(rq_write_lrd[index] == -1 and rq_read_lrd[index] != -1):
                  rq_write_lrd[index] = rq_read_lrd[index]
                  rq_write_lrd_previous[index] = rq_read_lrd[index]
              elif(rq_write_lrd_previous[index] == -1 and rq_read_lrd[index] != -1):
                  rq_write_lrd_previous[index] = rq_read_lrd[index]
              end
  
              if(rq_write_lbl[index] == -1 and rq_read_lbl[index] != -1):
                  rq_write_lbl[index] = rq_read_lbl[index]
                  rq_write_lbl_previous[index] = rq_read_lbl[index]
              elif(rq_write_lbl_previous[index] == -1 and rq_read_lbl[index] != -1):
                  rq_write_lbl_previous[index] = rq_read_lbl[index]
              end
  
              if(rq_write_lgn[index] == -1 and rq_read_lgn[index] != -1):
                  rq_write_lgn[index] = rq_read_lgn[index]
                  rq_write_lgn_previous[index] = rq_read_lgn[index]
              elif(rq_write_lgn_previous[index] == -1 and rq_read_lgn[index] != -1):
                  rq_write_lgn_previous[index] = rq_read_lgn[index]
              end
  
              if(rq_write_msc[index] == -1 and rq_read_msc[index] != -1):
                  rq_write_msc[index] = rq_read_msc[index]
                  rq_write_msc_previous[index] = rq_read_msc[index]
              elif(rq_write_msc_previous[index] == -1 and rq_read_msc[index] != -1):
                  rq_write_msc_previous[index] = rq_read_msc[index]
              end
  
              if(rq_write_mod[index] == -1 and rq_read_mod[index] != -1):
                  rq_write_mod[index] = rq_read_mod[index]
                  rq_write_mod_previous[index] = rq_read_mod[index]
              elif(rq_write_mod_previous[index] == -1 and rq_read_mod[index] != -1):
                  rq_write_mod_previous[index] = rq_read_mod[index]
              end
  
          end
          index = index + 1
      end
  end
  
  def rq_comm_set_var(var, value=0, gripper_socket="1"):
      socket_set_var(var, value, gripper_socket)
      return socket_read_byte_list(3, gripper_socket)
  end
  
  def rq_comm_set_pos_spe_for(pos=0, speed=0, force=0, gripper_socket="1"):
      socket_send_string("SET POS", gripper_socket)
      socket_send_byte(32, gripper_socket)
      socket_send_string(pos, gripper_socket)
      socket_send_byte(32, gripper_socket)
      socket_send_string("SPE", gripper_socket)
      socket_send_byte(32, gripper_socket)
      socket_send_string(speed, gripper_socket)
      socket_send_byte(32, gripper_socket)
      socket_send_string("FOR", gripper_socket)
      socket_send_byte(32, gripper_socket)
      socket_send_string(force, gripper_socket)
      socket_send_byte(10, gripper_socket)
      return socket_read_byte_list(3, gripper_socket)
  end
  
  def rq_comm_read_variables():
      index = 0
  
      while(index <= 3):
          socket = rq_index_to_socket(index)
  
          if(gripper_connected[index]):
  
              if(rq_read_act_req[index]):
                  rq_read_act[index] = socket_get_var("ACT", socket)
                  rq_read_act_req[index] = False
              end
  
              if(rq_read_gto_req[index]):
                  rq_read_gto[index] = socket_get_var("GTO", socket)
                  rq_read_gto_req[index] = False
              end
  
              if(rq_read_pre_req[index]):
                  rq_read_pre[index] = socket_get_var("PRE", socket)
                  rq_read_pre_req[index] = False
              end
  
              if(rq_read_pos_req[index]):
                  rq_read_pos[index] = socket_get_var("POS", socket)
                  rq_read_pos_req[index] = False
              end
  
              if(rq_read_spe_req[index]):
                  rq_read_spe[index] = socket_get_var("SPE", socket)
                  rq_read_spe_req[index] = False
              end
  
              if(rq_read_for_req[index]):
                  rq_read_for[index] = socket_get_var("FOR", socket)
                  rq_read_for_req[index] = False
              end
  
              if(rq_read_obj_req[index]):
                  rq_read_obj[index] = socket_get_var("OBJ", socket)
                  rq_read_obj_req[index] = False
              end
  
              if(rq_read_sta_req[index]):
                  rq_read_sta[index] = socket_get_var("STA", socket)
                  rq_read_sta_req[index] = False
              end
  
              if(rq_read_mod_req[index]):
                  rq_read_mod[index] = socket_get_var("MOD", socket)
                  rq_read_mod_req[index] = False
              end
  
              if(rq_read_flt_req[index]):
                  rq_read_flt[index] = socket_get_var("FLT",socket)
                  rq_read_flt_req[index] = False
              end
  
              if(rq_read_lbp_req[index]):
                  rq_read_lbp[index] = socket_get_var("LBP", socket)
                  rq_read_lbp_req[index] = False
              end
  
              if(rq_read_lrd_req[index]):
                  rq_read_lrd[index] = socket_get_var("LRD", socket)
                  rq_read_lrd_req[index] = False
              end
  
              if(rq_read_lbl_req[index]):
                  rq_read_lbl[index] = socket_get_var("LBL",socket)
                  rq_read_lbl_req[index] = False
              end
  
              if(rq_read_lgn_req[index]):
                  rq_read_lgn[index] = socket_get_var("LGN", socket)
                  rq_read_lgn_req[index] = False
              end
  
              if(rq_read_msc_req[index]):
                  rq_read_msc[index] = socket_get_var("MSC", socket)
                  rq_read_msc_req[index] = False
              end
  
              if(rq_read_cou_req[index]):
                  rq_read_cou[index] = socket_get_var("COU", socket)
                  rq_read_cou_req[index] = False
              end
  
              if(rq_read_ncy_req[index]):
                  rq_read_ncy[index] = socket_get_var("NCY", socket)
                  rq_read_ncy_req[index] = False
              end
  
              if(rq_read_dst_req[index]):
                  rq_read_dst[index] = socket_get_var("DST", socket)
                  rq_read_dst_req[index] = False
              end
  
              if(rq_read_pco_req[index]):
                  rq_read_pco[index] = socket_get_var("PCO", socket)
                  rq_read_pco_req[index] = False
              end
          end
          index = index + 1
      end
  end
  
  def rq_comm_read_constants():
  
      if(gripper_connected[0]):
          while(rq_read_snu_1 == rq_string_initial_value):
              socket_send_string("GET SNU", "1")
              rq_read_snu_1 = socket_read_string("1")
          end
  
          while(rq_read_fwv_1 == rq_string_initial_value):
              socket_send_string("GET FWV", "1")
              rq_read_fwv_1 = socket_read_string("1")
          end
  
          while(rq_read_ver_1 == rq_string_initial_value):
              socket_send_string("GET VER", "1")
              rq_read_ver_1 = socket_read_string("1")
          end
      end
  
      if(gripper_connected[1]):
          while(rq_read_snu_2 == rq_string_initial_value):
              socket_send_string("GET SNU", "2")
              rq_read_snu_2 = socket_read_string("2")
          end
  
          while(rq_read_fwv_2 == rq_string_initial_value):
              socket_send_string("GET FWV", "2")
              rq_read_fwv_2 = socket_read_string("2")
          end
  
          while(rq_read_ver_2 == rq_string_initial_value):
              socket_send_string("GET VER", "2")
              rq_read_ver_2 = socket_read_string("2")
          end
      end
  
      if(gripper_connected[2]):
          while(rq_read_snu_3 == rq_string_initial_value):
              socket_send_string("GET SNU", "3")
              rq_read_snu_3 = socket_read_string("3")
          end
  
          while(rq_read_fwv_3 == rq_string_initial_value):
              socket_send_string("GET FWV", "3")
              rq_read_fwv_3 = socket_read_string("3")
          end
  
          while(rq_read_ver_3 == rq_string_initial_value):
              socket_send_string("GET VER", "3")
              rq_read_ver_3 = socket_read_string("3")
          end
      end
  
      if(gripper_connected[3]):
          while(rq_read_snu_4 == rq_string_initial_value):
              socket_send_string("GET SNU", "4")
              rq_read_snu_4 = socket_read_string("4")
          end
  
          while(rq_read_fwv_4 == rq_string_initial_value):
              socket_send_string("GET FWV", "4")
              rq_read_fwv_4 = socket_read_string("4")
          end
  
          while(rq_read_ver_4 == rq_string_initial_value):
              socket_send_string("GET VER", "4")
              rq_read_ver_4 = socket_read_string("4")
          end
      end
  end
  
  def rq_comm_write_variables():
      index = 0
  
      while(index <= 3):
          socket = rq_index_to_socket(index)
  
          if(gripper_connected[index]):
  
              if(rq_write_act_request[index]):
                  if(is_ack(rq_comm_set_var("ACT", rq_write_act[index], socket))):
                      rq_write_act_previous[index] = rq_write_act[index]
                      rq_write_act_request[index] = False
                  end
              end
  
              if(rq_write_gto_request[index]):
                  if(is_ack(rq_comm_set_var("GTO", rq_write_gto[index], socket))):
                      rq_write_gto_previous[index] = rq_write_gto[index]
                      rq_write_gto_request[index] = False
                  end
              end
  
              if(rq_write_atr_request[index]):
                  if(is_ack(rq_comm_set_var("ATR", rq_write_atr[index], socket))):
                      rq_write_atr_previous[index] = rq_write_atr[index]
                      rq_write_atr_request[index] = False
                  end
              end
  
              if(rq_write_ard_request[index]):
                  if(is_ack(rq_comm_set_var("ARD", rq_write_ard[index], socket))):
                      rq_write_ard_previous[index] = rq_write_ard[index]
                      rq_write_ard_request[index] = False
                  end
              end
  
              if(rq_write_pos_request[index]):
                  if(is_ack(rq_comm_set_pos_spe_for(rq_write_pos[index], rq_write_spe[index], rq_write_for[index], socket))):
                      rq_write_pos_previous[index] = rq_write_pos[index]
                      rq_write_spe_previous[index] = rq_write_spe[index]
                      rq_write_for_previous[index] = rq_write_for[index]
                      rq_write_pos_request[index] = False
                  end
              end
  
              if(rq_write_lbp_request[index]):
                  if(is_ack(rq_comm_set_var("LBP", rq_write_lbp[index], socket))):
                      rq_write_lbp_previous[index] = rq_write_lbp[index]
                      rq_write_lbp_request[index] = False
                  end
              end
  
              if(rq_write_lrd_request[index]):
                  if(is_ack(rq_comm_set_var("LRD", rq_write_lrd[index], socket))):
                      rq_write_lrd_previous[index] = rq_write_lrd[index]
                      rq_write_lrd_request[index] = False
                  end
              end
  
              if(rq_write_lbl_request[index]):
                  if(is_ack(rq_comm_set_var("LBL", rq_write_lbl[index], socket))):
                      rq_write_lbl_previous[index] = rq_write_lbl[index]
                      rq_write_lbl_request[index] = False
                  end
              end
  
              if(rq_write_lgn_request[index]):
                  if(is_ack(rq_comm_set_var("LGN", rq_write_lgn[index], socket))):
                      rq_write_lgn_previous[index] = rq_write_lgn[index]
                      rq_write_lgn_request[index] = False
                  end
              end
  
              if(rq_write_msc_request[index]):
                  if(is_ack(rq_comm_set_var("MSC", rq_write_msc[index], socket))):
                      rq_write_msc_previous[index] = rq_write_msc[index]
                      rq_write_msc_request[index] = False
                  end
              end
  
              if(rq_write_mod_request[index]):
                  if(is_ack(rq_comm_set_var("MOD", rq_write_mod[index], socket))):
                      rq_write_mod_previous[index] = rq_write_mod[index]
                      rq_write_mod_request[index] = False
                  end
              end
          end
          index = index + 1
      end
  end
  
  def rq_activate(gripper_socket="1"):
      if (not rq_is_gripper_activated(gripper_socket)):
          rq_reset(gripper_socket)
  
          while(not rq_get_var("ACT", 1, gripper_socket) == 0 or not rq_get_var("STA", 1, gripper_socket) == 0):
              rq_reset(gripper_socket)
              sleep(0.008)
          end
  
          rq_set_var("ACT",1, gripper_socket)
      end
  end
  
  def rq_activate_and_wait(gripper_socket="1"):
      if (not rq_is_gripper_activated(gripper_socket)):
          rq_activate(gripper_socket)
          sleep(1.0)
  
          while(not rq_get_var("ACT", 1, gripper_socket) == 1 or not rq_get_var("STA", 1, gripper_socket) == 3):
              sleep(0.1)
          end
  
          sleep(0.5)
      end
  end
  
  def rq_activate_all_grippers(reset=False):
      if(gripper_connected[0]):
          rq_reset_and_activate("1", reset)
      end
  
      if(gripper_connected[1]):
          rq_reset_and_activate("2", reset)
      end
  
      if(gripper_connected[2]):
          rq_reset_and_activate("3", reset)
      end
  
      if(gripper_connected[3]):
          rq_reset_and_activate("4", reset)
      end
  end
  
  def rq_reset_and_activate(gripper_socket="1", reset=False):
      if(reset):
          rq_reset(gripper_socket)
          rq_activate_and_wait(gripper_socket)
      elif(not rq_is_gripper_activated(gripper_socket)):
          rq_activate_and_wait(gripper_socket)
      end
  end
  
  def rq_reset(gripper_socket="1"):
      rq_set_var("ACT", 0, gripper_socket)
      rq_set_var("ATR", 0, gripper_socket)
  
      while(not rq_get_var("ACT", 1, gripper_socket) == 0 or not rq_get_var("STA", 1, gripper_socket) == 0):
          rq_set_var("ACT", 0, gripper_socket)
          rq_set_var("ATR", 0, gripper_socket)
          sleep(0.008)
      end
  
      sleep(0.5)
  end
  
  def rq_auto_release_open_and_wait(gripper_socket="1"):
      rq_set_var("ATR",0, gripper_socket)
      rq_set_var("ARD",0, gripper_socket)
      rq_set_var("ACT",1, gripper_socket)
      sleep(0.1)
      rq_set_var("ATR",1, gripper_socket)
  
      rq_wait_autorelease_completed(gripper_socket)
  end
  
  def rq_auto_release_close_and_wait(gripper_socket="1"):
      rq_set_var("ATR",0, gripper_socket)
      rq_set_var("ARD",1, gripper_socket)
      rq_set_var("ACT",1, gripper_socket)
      sleep(0.1)
      rq_set_var("ATR",1, gripper_socket)
  
      rq_wait_autorelease_completed(gripper_socket)
  end
  
  def rq_wait_autorelease_completed(gripper_socket="1"):
      remainingRetries = 20
      gFLT = rq_get_var("FLT", 2, gripper_socket)
  
      while(not is_FLT_autorelease_in_progress(gFLT) and remainingRetries > 0):
          remainingRetries = remainingRetries - 1
          gFLT = rq_get_var("FLT", 2, gripper_socket)
          sleep(0.1)
      end
  
      remainingRetries = 100
      gFLT = rq_get_var("FLT", 2, gripper_socket)
  
      while(not is_FLT_autorelease_completed(gFLT) and remainingRetries > 0):
          remainingRetries = remainingRetries - 1
          gFLT = rq_get_var("FLT", 2, gripper_socket)
          sleep(0.1)
      end
  end
  
  def rq_set_force(force, gripper_socket="1"):
      force = floor(scale(force, [0, 255], [0.0, 255.0]))
      rq_set_var("FOR", force, gripper_socket)
  end
  
  def rq_set_speed(speed, gripper_socket="1"):
      speed = floor(scale(speed, [0, 255], [0.0, 255.0]))
      rq_set_var("SPE", speed, gripper_socket)
  end
  
  def rq_open(gripper_socket="1"):
      rq_move(0, gripper_socket)
  end
  
  def rq_close(gripper_socket="1"):
      rq_move(255, gripper_socket)
  end
  
  def rq_open_and_wait(gripper_socket="1"):
      rq_move_and_wait(0, gripper_socket)
  end
  
  def rq_close_and_wait(gripper_socket="1"):
      rq_move_and_wait(255, gripper_socket)
  end
  
  def rq_move(pos, gripper_socket="1"):
      rq_set_pos(pos, gripper_socket)
      rq_go_to(gripper_socket)
  end
  
  def rq_move_and_wait(pos, gripper_socket="1"):
      rq_move(pos, gripper_socket)
  
      while (not rq_is_motion_complete(gripper_socket)):
          # wait for motion completed
          sleep(0.008)
      end
  end
  
  def rq_wait_for_pos_request(pos, gripper_socket="1"):
      gPRE = rq_get_var("PRE", 3, gripper_socket)
  
      while (gPRE != pos):
          rq_set_var("POS", pos, gripper_socket)
          sleep(0.008)
          gPRE = rq_get_var("PRE", 3, gripper_socket)
      end
  end
  
  def rq_wait_pos_spe_for_request(pos, speed, force, gripper_socket="1"):
      gPRE = rq_get_var("PRE", 3, gripper_socket)
  
      while (gPRE != pos):
          rq_set_pos_spe_for_var(pos, speed, force, gripper_socket)
          sleep(0.008)
          gPRE = rq_get_var("PRE", 3, gripper_socket)
      end
  end
  
  def rq_wait_for_pos(pos, gripper_socket="1"):
      rq_wait_for_pos_request(pos, gripper_socket)
  
      # Wait for the gripper motion to complete
      while (not rq_is_motion_complete(gripper_socket)):
          # wait for motion completed
          sleep(0.008)
          rq_set_var("GTO", 1, gripper_socket)
      end
  end
  
  def rq_wait(gripper_socket="1"):
      # Wait for the gripper motion to complete
      while (not rq_is_motion_complete(gripper_socket)):
          sleep(0.008)
          # The following patch is for Robotiq's Camera issue when communication is lost, but not the activation
          # the communication driver reset the GTO bit
          rq_set_var("GTO", 1, gripper_socket)
      end
  end
  
  def rq_wait_for_object_detected(gripper_socket="1"):
      # Wait the object detection
      while (not rq_is_object_detected(gripper_socket)):
          sleep(0.008)
      end
  end
  
  # set the position
  def rq_set_pos(pos, gripper_socket="1"):
      pos = floor(scale(pos, [0, 255], [0.0, 255.0]))
      rq_set_var("POS", pos, gripper_socket)
      rq_wait_for_pos_request(pos, gripper_socket)
  end
  
  def rq_set_pos_spd_for(pos, speed, force, gripper_socket="1"):
      pos = floor(scale(pos, [0, 255], [0.0, 255.0]))
      speed = floor(scale(speed, [0, 255], [0.0, 255.0]))
      force = floor(scale(force, [0, 255], [0.0, 255.0]))
  
      rq_set_pos_spe_for_var(pos, speed, force, gripper_socket)
  end
  
  def rq_set_gripper_max_current_mA(current_mA, gripper_socket="1"):
      current = floor(current_mA / 10)
  
      rq_set_var("MSC", current, gripper_socket)
      current_read = rq_get_var("MSC", 1, gripper_socket)
  
      while(current_read != current):
          rq_set_var("MSC", current, gripper_socket)
          current_read = rq_get_var("MSC", 1, gripper_socket)
      end
  end
  
  def rq_set_gripper_mode(mode, gripper_socket="1"):
      rq_set_var("MOD", mode, gripper_socket)
  end
  
  def rq_set_gripper_max_cur(current_mA, gripper_socket="1"):
      rq_set_gripper_max_current_mA(current_mA, gripper_socket)
  end
  
  def rq_get_gripper_max_current_mA(gripper_socket="1"):
      current = rq_get_var("MSC", 1, gripper_socket)
  
      if(current == -1):
          current_mA = current
      else:
          current_mA = current * 10
      end
  
      return current_mA
  end
  
  def rq_get_gripper_max_cur(gripper_socket="1"):
      return rq_get_gripper_max_current_mA(gripper_socket)
  end
  
  def rq_set_max_current_for_all_grippers():
      current_mA = rq_get_max_current_mA()
  
      if(gripper_connected[0]):
          rq_set_gripper_max_current_mA(current_mA, "1")
      end
  
      if(gripper_connected[1]):
          rq_set_gripper_max_current_mA(current_mA, "2")
      end
  
      if(gripper_connected[2]):
          rq_set_gripper_max_current_mA(current_mA, "3")
      end
  
      if(gripper_connected[3]):
          rq_set_gripper_max_current_mA(current_mA, "4")
      end
  end
  
  def rq_get_max_current_mA():
      max_current_mA = 0
  
      if(rq_current_limit_enabled):
          nb_connected_grippers = rq_get_nb_connected_grippers()
  
          if(nb_connected_grippers == 1):
              max_current_mA = 600
          elif(nb_connected_grippers > 1):
              max_current_mA = 450
          end
      else:
  
      end
  
      return max_current_mA
  end
  
  def rq_get_nb_connected_grippers():
      nb_connected_grippers = 0
  
      if(gripper_connected[0]):
          nb_connected_grippers = nb_connected_grippers + 1
      end
  
      if(gripper_connected[1]):
          nb_connected_grippers = nb_connected_grippers + 1
      end
  
      if(gripper_connected[2]):
          nb_connected_grippers = nb_connected_grippers + 1
      end
  
      if(gripper_connected[3]):
          nb_connected_grippers = nb_connected_grippers + 1
      end
  
      return nb_connected_grippers
  end
  
  def rq_list_of_bytes_to_value(list_of_bytes):
      value = -1
  
      # response list length
      if (list_of_bytes[0] == 1):
          value = list_of_bytes[1] - 48
      elif (list_of_bytes[0] == 2):
          value = (list_of_bytes[1] - 48) * 10 + (list_of_bytes[2] - 48)
      elif (list_of_bytes[0] == 3):
          value = (list_of_bytes[1] - 48) * 100 + (list_of_bytes[2] - 48) * 10 + (list_of_bytes[3] - 48)
      end
  
      return value
  end
  
  def rq_is_motion_complete(gripper_socket="1"):
      gOBJ = rq_get_var("OBJ", 1, gripper_socket)
      sleep(0.008)
      return is_OBJ_gripper_at_position(gOBJ) or is_OBJ_object_detected(gOBJ)
  end
  
  def rq_is_gripper_activated(gripper_socket="1"):
      gSTA = rq_get_var("STA", 1, gripper_socket)
      sleep(0.008)
      return is_STA_gripper_activated(gSTA)
  end
  
  def rq_is_object_detected(gripper_socket="1"):
      gOBJ = rq_get_var("OBJ", 1, gripper_socket)
      sleep(0.008)
      return is_OBJ_object_detected(gOBJ)
  end
  
  def rq_current_pos(gripper_socket="1"):
      gPOS = rq_get_var("POS", 1, gripper_socket)
      sleep(0.008)
      return gPOS
  end
  
  def rq_motor_current(gripper_socket="1"):
      rq_current = rq_get_var("COU", 1, gripper_socket)
      sleep(0.008)
      return rq_current * 10
  end
  
  def rq_print_connected_grippers():
      if(gripper_connected[0]):
          textmsg("Gripper 1 : ", "connected and socket open.")
      end
  
      if (gripper_connected[1]):
          textmsg("Gripper 2 : ", "connected and socket open.")
      end
  
      if (gripper_connected[2]):
          textmsg("Gripper 3 : ", "connected and socket open.")
      end
  
      if (gripper_connected[3]):
          textmsg("Gripper 4 : ", "connected and socket open.")
      end
  end
  
  def rq_print_gripper_fault_code(gripper_socket="1"):
      gFLT = rq_get_var("FLT", 2, gripper_socket)
  
      if(is_FLT_no_fault(gFLT)):
          textmsg("Gripper Fault : ", "No Fault (0x00)")
      elif (is_FLT_action_delayed(gFLT)):
          textmsg("Gripper Fault : ", "Priority Fault: Action delayed, initialization must be completed prior to performing the action (0x05)")
      elif (is_FLT_not_activated(gFLT)):
          textmsg("Gripper Fault : ", "Priority Fault: The activation bit must be set prior to performing the action (0x07)")
      elif (is_FLT_over_temperature(gFLT)):
          textmsg("Gripper Fault : ", "Minor Fault: Maximum operating temperature exceeded (≥ 85°C internally), let cool down (below 80°C) (0x08)")
      elif (is_FLT_no_communication(gFLT)):
          textmsg("Gripper Fault : ", "Minor Fault: No communication during at least 1 second (0x09)")
      elif (is_FLT_under_voltage(gFLT)):
          textmsg("Gripper Fault : ", "Major Fault: Under minimum operating voltage (0x0A)")
      elif (is_FLT_autorelease_in_progress(gFLT)):
          textmsg("Gripper Fault : ", "Major Fault: Automatic release in progress (0x0B)")
      elif (is_FLT_internal_fault(gFLT)):
          textmsg("Gripper Fault : ", "Major Fault: Internal fault; contact support@robotiq.com (0x0C)")
      elif (is_FLT_activation_error(gFLT)):
          textmsg("Gripper Fault : ", "Major Fault: Activation fault; verify that no interference or other error occurred (0x0D)")
      elif (is_FLT_overcurrent(gFLT)):
          textmsg("Gripper Fault : ", "Major Fault: Overcurrent triggered (0x0E)")
      elif (is_FLT_autorelease_completed(gFLT)):
          textmsg("Gripper Fault : ", "Major Fault: Automatic release completed (0x0F)")
      else:
          textmsg("Gripper Fault : ", "Unknown Fault")
      end
  end
  
  def rq_print_gripper_num_cycles(gripper_socket="1"):
      num_cycles = rq_get_var("NCY", 1, gripper_socket)
  
      if(num_cycles == -1):
          textmsg("Gripper Cycle Number : ", "Number of cycles is unreachable.")
      else:
          textmsg("Gripper Cycle Number : ", num_cycles)
      end
  end
  
  def rq_print_gripper_driver_state(gripper_socket="1"):
      driver_state = rq_get_var("DST", 1, gripper_socket)
  
      if(driver_state == 0):
          textmsg("Gripper Driver State : ", "RQ_STATE_INIT")
      elif(driver_state == 1):
          textmsg("Gripper Driver State : ", "RQ_STATE_LISTEN")
      elif(driver_state == 2):
          textmsg("Gripper Driver State : ", "RQ_STATE_READ_INFO")
      elif(driver_state == 3):
          textmsg("Gripper Driver State : ", "RQ_STATE_ACTIVATION")
      else:
          textmsg("Gripper Driver State : ", "RQ_STATE_RUN")
      end
  end
  
  def rq_print_gripper_serial_number(gripper_socket="1"):
      serial_number = rq_get_var_string("SNU", 1, gripper_socket)
      textmsg("Gripper Serial Number : ", serial_number)
  end
  
  def rq_print_gripper_firmware_version(gripper_socket="1"):
      firmware_version = rq_get_var_string("FWV", 1, gripper_socket)
      textmsg("Gripper Firmware Version : ", firmware_version)
  end
  
  def rq_print_gripper_driver_version(gripper_socket="1"):
      driver_version = rq_get_var_string("VER", 1, gripper_socket)
      textmsg("Gripper Driver Version : ", driver_version)
  end
  
  def rq_print_gripper_connection_state(gripper_socket="1"):
      connection_state = rq_get_var("PCO", 1, gripper_socket)
  
      if (connection_state == 0):
          textmsg("Gripper Connection State : ", "No connection problem detected")
      else:
          textmsg("Gripper Connection State : ", "Connection problem detected")
      end
  end
  
  # Returns True if list_of_bytes is [3, 'a', 'c', 'k']
  def is_ack(list_of_bytes):
  
      # list length is not 3
      if (list_of_bytes[0] != 3):
          return False
      end
  
      # first byte not is 'a'?
      if (list_of_bytes[1] != 97):
          return False
      end
  
      # first byte not is 'c'?
      if (list_of_bytes[2] != 99):
          return False
      end
  
      # first byte not is 'k'?
      if (list_of_bytes[3] != 107):
          return False
      end
  
      return True
  end
  
  # Returns True if list_of_bytes is not [3, 'a', 'c', 'k']
  def is_not_ack(list_of_bytes):
      if (is_ack(list_of_bytes)):
          return False
      else:
          return True
      end
  end
  
  def is_STA_gripper_activated (gSTA):
      if (gSTA == 3):
          return True
      end
  
      return False
  end
  
  def is_OBJ_object_detected (gOBJ):
      if (gOBJ == 1 or gOBJ == 2):
          return True
      end
  
      return False
  end
  
  def is_OBJ_gripper_at_position (gOBJ):
      if (gOBJ == 3):
          return True
      end
  
      return False
  end
  
  def is_not_OBJ_gripper_at_position (gOBJ):
      if (is_OBJ_gripper_at_position(gOBJ)):
          return False
      else:
          return True
      end
  end
  
  #### GTO Section ####
  def rq_stop(gripper_socket="1"):
      rq_set_var("GTO", 0, gripper_socket)
  end
  
  def rq_set_GTO_and_wait(value, gripper_socket="1"):
      rq_set_var("GTO" ,value, gripper_socket)
      while(not is_GTO(value, rq_get_var("GTO", 1, gripper_socket))):
        sleep(0.008)
      end
  end
  
  def rq_go_to(gripper_socket="1"):
      rq_set_var("GTO", 1, gripper_socket)
  end
  
  
  def is_GTO(goto_value, rGTO):
      return rGTO == goto_value
  end
  #### GTO Section ####
  
  def is_FLT_no_fault(gFLT):
      return gFLT == 0
  end
  
  def is_FLT_warning(gFLT):
      return gFLT >= 1 and gFLT <= 7
  end
  
  def is_FLT_faulted(gFLT):
      return gFLT >= 8
  end
  
  def is_FLT_action_delayed(gFLT):
      return gFLT == 5
  end
  
  def is_FLT_not_activated(gFLT):
      return gFLT == 7
  end
  
  def is_FLT_over_temperature(gFLT):
      return gFLT == 8
  end
  
  def is_FLT_no_communication(gFLT):
      return gFLT == 9
  end
  
  def is_FLT_under_voltage(gFLT):
      return gFLT == 10
  end
  
  def is_FLT_autorelease_in_progress(gFLT):
      return gFLT == 11
  end
  
  def is_FLT_internal_fault(gFLT):
      return gFLT == 12
  end
  
  def is_FLT_activation_error(gFLT):
      return gFLT == 13
  end
  
  def is_FLT_overcurrent(gFLT):
      return gFLT == 14
  end
  
  def is_FLT_autorelease_completed(gFLT):
      return gFLT == 15
  end
  
  def rq_set_var(var_name, var_value, gripper_socket="1"):
      index = rq_socket_to_index(gripper_socket)
  
      enter_critical
  
      if (var_name == "ACT"):
          rq_write_act[index] = var_value
          rq_write_act_request[index] = True
      elif (var_name == "GTO"):
          rq_write_gto[index] = var_value
          rq_write_gto_request[index] = True
      elif (var_name == "ATR"):
          rq_write_atr[index] = var_value
          rq_write_atr_request[index] = True
      elif (var_name == "ARD"):
          rq_write_ard[index] = var_value
          rq_write_ard_request[index] = True
      elif (var_name == "FOR"):
          rq_write_for[index] = var_value
          rq_write_pos_request[index] = True
      elif (var_name == "SPE"):
          rq_write_spe[index] = var_value
          rq_write_pos_request[index] = True
      elif (var_name == "POS"):
          rq_write_pos[index] = var_value
          rq_write_pos_request[index] = True
      elif (var_name == "LBP"):
          rq_write_lbp[index] = var_value
          rq_write_lbp_request[index] = True
      elif (var_name == "LRD"):
          rq_write_lrd[index] = var_value
          rq_write_lrd_request[index] = True
      elif (var_name == "LBL"):
          rq_write_lbl[index] = var_value
          rq_write_lbl_request[index] = True
      elif (var_name == "LGN"):
          rq_write_lgn[index] = var_value
          rq_write_lgn_request[index] = True
      elif (var_name == "MSC"):
          rq_write_msc[index] = var_value
          rq_write_msc_request[index] = True
      elif (var_name == "MOD"):
          rq_write_mod[index] = var_value
          rq_write_mod_request[index] = True
      end
  
      exit_critical
  
      if (var_name == "ACT"):
          while(rq_write_act_request[index]):
              sleep(0.008)
          end
      elif (var_name == "GTO"):
          while(rq_write_gto_request[index]):
              sleep(0.008)
          end
      elif (var_name == "ATR"):
          while(rq_write_atr_request[index]):
              sleep(0.008)
          end
      elif (var_name == "ARD"):
          while(rq_write_ard_request[index]):
              sleep(0.008)
          end
      elif (var_name == "FOR"):
          while(rq_write_pos_request[index]):
              sleep(0.008)
          end
      elif (var_name == "SPE"):
          while(rq_write_pos_request[index]):
              sleep(0.008)
          end
      elif (var_name == "POS"):
          while(rq_write_pos_request[index]):
              sleep(0.008)
          end
      elif (var_name == "LBP"):
          while(rq_write_lbp_request[index]):
              sleep(0.008)
          end
      elif (var_name == "LRD"):
          while(rq_write_lrd_request[index]):
              sleep(0.008)
          end
      elif (var_name == "LBL"):
          while(rq_write_lbl_request[index]):
              sleep(0.008)
          end
      elif (var_name == "LGN"):
          while(rq_write_lgn_request[index]):
              sleep(0.008)
          end
      elif (var_name == "MSC"):
          while(rq_write_msc_request[index]):
              sleep(0.008)
          end
      elif (var_name == "MOD"):
          while(rq_write_mod_request[index]):
              sleep(0.008)
          end
      end
  end
  
  def rq_set_pos_spe_for_var(pos, speed, force, gripper_socket="1"):
      index = rq_socket_to_index(gripper_socket)
  
      enter_critical
  
      rq_write_for[index] = force
      rq_write_spe[index] = speed
      rq_write_pos[index] = pos
      rq_write_pos_request[index] = True
  
      exit_critical
  end
  
  def rq_get_var(var_name, nbr_bytes, gripper_socket="1"):
      index = rq_socket_to_index(gripper_socket)
      var_value = -1
  
      if (var_name == "ACT"):
          enter_critical
          rq_read_act_req[index] = True
          exit_critical
          while(rq_read_act_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_act[index]
  
      elif (var_name == "GTO"):
          enter_critical
          rq_read_gto_req[index] = True
          exit_critical
          while(rq_read_gto_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_gto[index]
  
      elif (var_name == "FOR"):
          enter_critical
          rq_read_for_req[index] = True
          exit_critical
          while(rq_read_for_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_for[index]
  
      elif (var_name == "SPE"):
          enter_critical
          rq_read_spe_req[index] = True
          exit_critical
          while(rq_read_spe_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_spe[index]
  
      elif (var_name == "OBJ"):
          enter_critical
          rq_read_obj_req[index] = True
          exit_critical
          while(rq_read_obj_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_obj[index]
  
      elif (var_name == "STA"):
          enter_critical
          rq_read_sta_req[index] = True
          exit_critical
          while(rq_read_sta_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_sta[index]
  
      elif (var_name == "FLT"):
          enter_critical
          rq_read_flt_req[index] = True
          exit_critical
          while(rq_read_flt_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_flt[index]
  
      elif (var_name == "POS"):
          enter_critical
          rq_read_pos_req[index] = True
          exit_critical
          while(rq_read_pos_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_pos[index]
  
      elif (var_name == "PRE"):
          enter_critical
          rq_read_pre_req[index] = True
          exit_critical
          while(rq_read_pre_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_pre[index]
  
      elif (var_name == "LBP"):
          enter_critical
          rq_read_lbp_req[index] = True
          exit_critical
          while(rq_read_lbp_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_lbp[index]
  
      elif (var_name == "LRD"):
          enter_critical
          rq_read_lrd_req[index] = True
          exit_critical
          while(rq_read_lrd_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_lrd[index]
  
      elif (var_name == "LBL"):
          enter_critical
          rq_read_lbl_req[index] = True
          exit_critical
          while(rq_read_lbl_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_lbl[index]
  
      elif (var_name == "LGN"):
          enter_critical
          rq_read_lgn_req[index] = True
          exit_critical
          while(rq_read_lgn_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_lgn[index]
  
      elif (var_name == "MSC"):
          enter_critical
          rq_read_msc_req[index] = True
          exit_critical
          while(rq_read_msc_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_msc[index]
  
      elif (var_name == "MOD"):
          enter_critical
          rq_read_mod_req[index] = True
          exit_critical
          while(rq_read_mod_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_mod[index]
  
      elif (var_name == "NCY"):
          enter_critical
          rq_read_ncy_req[index] = True
          exit_critical
          while(rq_read_ncy_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_ncy[index]
  
      elif (var_name == "PCO"):
          enter_critical
          rq_read_pco_req[index] = True
          exit_critical
          while(rq_read_pco_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_pco[index]
  
      elif (var_name == "DST"):
          enter_critical
          rq_read_dst_req[index] = True
          exit_critical
          while(rq_read_dst_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_dst[index]
  
      end
  
      return var_value
  end
  
  def rq_get_var_string(var_name, nbr_bytes, gripper_socket="1"):
      index = rq_socket_to_index(gripper_socket)
      var_value = ""
  
      enter_critical
  
      if (var_name == "SNU"):
          if(gripper_socket == "1"):
              var_value = rq_read_snu_1
          elif(gripper_socket == "2"):
              var_value = rq_read_snu_2
          elif(gripper_socket == "3"):
              var_value = rq_read_snu_3
          elif(gripper_socket == "4"):
              var_value = rq_read_snu_4
          end
      elif (var_name == "FWV"):
          if(gripper_socket == "1"):
              var_value = rq_read_fwv_1
          elif(gripper_socket == "2"):
              var_value = rq_read_fwv_2
          elif(gripper_socket == "3"):
              var_value = rq_read_fwv_3
          elif(gripper_socket == "4"):
              var_value = rq_read_fwv_4
          end
      elif (var_name == "VER"):
          if(gripper_socket == "1"):
              var_value = rq_read_ver_1
          elif(gripper_socket == "2"):
              var_value = rq_read_ver_2
          elif(gripper_socket == "3"):
              var_value = rq_read_ver_3
          elif(gripper_socket == "4"):
              var_value = rq_read_ver_4
          end
      end
  
      exit_critical
  
      return var_value
  end
  
  def rq_is_object_validated(gripper_selected, gripper_socket="1"):
      if(gripper_selected):
          if(rq_is_object_detected(gripper_socket)):
              return True
          else:
              return False
          end
      else:
          return True
      end
  end
  
  ############################################
  # normalized functions (maps 0-100 to 0-255)
  ############################################
  def rq_set_force_norm(force_norm, gripper_socket="1"):
      force_gripper = norm_to_gripper(force_norm)
      rq_set_force(force_gripper, gripper_socket)
  end
  
  def rq_set_speed_norm(speed_norm, gripper_socket="1"):
      speed_gripper = norm_to_gripper(speed_norm)
      rq_set_speed(speed_gripper, gripper_socket)
  end
  
  def rq_move_norm(pos_norm, gripper_socket="1"):
      pos_gripper = norm_to_gripper(pos_norm)
      rq_move(pos_gripper, gripper_socket)
  end
  
  def rq_move_and_wait_norm(pos_norm, gripper_socket="1"):
      pos_gripper = norm_to_gripper(pos_norm)
      rq_move_and_wait(pos_gripper, gripper_socket)
  end
  
  def rq_set_pos_norm(pos_norm, gripper_socket="1"):
      pos_gripper = norm_to_gripper(pos_norm)
      rq_set_pos(pos_gripper, gripper_socket)
  end
  
  def rq_current_pos_norm(gripper_socket="1"):
      pos_gripper = rq_current_pos(gripper_socket)
      pos_norm = gripper_to_norm(pos_gripper)
      return pos_norm
  end
  
  def gripper_to_norm(value_gripper):
      value_norm = (value_gripper / 255) * 100
      return floor(value_norm)
  end
  
  def norm_to_gripper(value_norm):
      value_gripper = (value_norm / 100) * 255
      return ceil(value_gripper)
  end
  
  def rq_get_position():
      return rq_current_pos_norm()
  end
  
  def rq_gripper_led_on(gripper_socket="1"):
      rq_set_var("LBP",0, gripper_socket)
  end
  
  def rq_gripper_led_off(gripper_socket="1"):
      rq_set_var("LBP",1, gripper_socket)
      rq_set_var("LRD",0, gripper_socket)
      rq_set_var("LBL",0, gripper_socket)
      rq_set_var("LGN",0, gripper_socket)
  end
  
  def rq_gripper_led_force_red(gripper_socket="1"):
      rq_set_var("LBP",1, gripper_socket)
      rq_set_var("LRD",1, gripper_socket)
      rq_set_var("LBL",0, gripper_socket)
      rq_set_var("LGN",0, gripper_socket)
  end
  
  def rq_gripper_led_force_blue(gripper_socket="1"):
      rq_set_var("LBP",1, gripper_socket)
      rq_set_var("LRD",0, gripper_socket)
      rq_set_var("LBL",1, gripper_socket)
      rq_set_var("LGN",0, gripper_socket)
  end
  
  def rq_gripper_led_force_green(gripper_socket="1"):
      rq_set_var("LBP",1, gripper_socket)
      rq_set_var("LRD",0, gripper_socket)
      rq_set_var("LBL",0, gripper_socket)
      rq_set_var("LGN",1, gripper_socket)
  end
  
  def rq_gripper_led_force_purple(gripper_socket="1"):
      rq_set_var("LBP",1, gripper_socket)
      rq_set_var("LRD",1, gripper_socket)
      rq_set_var("LBL",1, gripper_socket)
      rq_set_var("LGN",0, gripper_socket)
  end
  
  ############################################
  # mm/inches functions
  ############################################
  gripper_closed_norm = [100, 100, 100, 100]
  gripper_open_norm = [0, 0, 0, 0]
  gripper_closed_mm = [0, 0, 0, 0]
  gripper_open_mm = [50, 50, 50, 50]
  
  def rq_current_pos_mm(gripper_socket=1):
      pos_gripper = rq_current_pos(gripper_socket)
      pos_mm = gripper_to_mm(pos_gripper, gripper_socket)
      return round_value_2_dec(pos_mm)
  end
  
  def rq_current_pos_inches(gripper_socket=1):
      pos_gripper = rq_current_pos(gripper_socket)
      pos_mm = gripper_to_mm(pos_gripper, gripper_socket)
      pos_in = pos_mm / 25.4
      return round_value_2_dec(pos_in)
  end
  
  def rq_move_mm(pos_mm, gripper_socket=1):
      pos_gripper = mm_to_gripper(pos_mm, gripper_socket)
      rq_move(pos_gripper, gripper_socket)
  end
  
  def rq_move_and_wait_mm(pos_mm, gripper_socket=1):
      pos_gripper = mm_to_gripper(pos_mm, gripper_socket)
      rq_move_and_wait(pos_gripper, gripper_socket)
  end
  
  def rq_move_inches(pos_in, gripper_socket=1):
      pos_mm = pos_in * 25.4
      rq_move_mm(pos_mm, gripper_socket)
  end
  
  def rq_move_and_wait_inches(pos_in, gripper_socket=1):
      pos_mm = pos_in * 25.4
      rq_move_and_wait_mm(pos_mm, gripper_socket)
  end
  
  def get_closed_norm(gripper_socket):
      return gripper_closed_norm[gripper_socket - 1]
  end
  
  def get_open_norm(gripper_socket):
      return gripper_open_norm[gripper_socket - 1]
  end
  
  def get_closed_mm(gripper_socket):
      return gripper_closed_mm[gripper_socket - 1]
  end
  
  def get_open_mm(gripper_socket):
      return gripper_open_mm[gripper_socket - 1]
  end
  
  def set_closed_norm(closed_norm, gripper_socket):
      gripper_closed_norm[gripper_socket - 1] = closed_norm
  end
  
  def set_open_norm(open_norm, gripper_socket):
      gripper_open_norm[gripper_socket - 1] = open_norm
  end
  
  def set_closed_mm(closed_mm, gripper_socket):
      gripper_closed_mm[gripper_socket - 1] = closed_mm
  end
  
  def set_open_mm(open_mm, gripper_socket):
      gripper_open_mm[gripper_socket - 1] = open_mm
  end
  
  def gripper_to_mm(value_gripper, gripper_socket):
      closed_norm = get_closed_norm(gripper_socket)
      open_norm = get_open_norm(gripper_socket)
      closed_mm = get_closed_mm(gripper_socket)
      open_mm = get_open_mm(gripper_socket)
  
      value_norm = (value_gripper / 255) * 100
  
      slope = (closed_mm - open_mm) / (closed_norm - open_norm)
      value_mm = slope * (value_norm - closed_norm) + closed_mm
  
      if (value_mm > open_mm):
          value_mm_limited = open_mm
      elif (value_mm < closed_mm):
          value_mm_limited = closed_mm
      else:
          value_mm_limited = value_mm
      end
  
      return value_mm_limited
  end
  
  def mm_to_gripper(value_mm, gripper_socket):
      closed_norm = get_closed_norm(gripper_socket)
      open_norm = get_open_norm(gripper_socket)
      closed_mm = get_closed_mm(gripper_socket)
      open_mm = get_open_mm(gripper_socket)
  
      slope = (closed_norm - open_norm) / (closed_mm - open_mm)
      value_norm = (value_mm - closed_mm) * slope + closed_norm
  
      value_gripper = value_norm * 255 / 100
  
      if (value_gripper > 255):
          value_gripper_limited = 255
      elif (value_gripper < 0):
          value_gripper_limited = 0
      else:
          value_gripper_limited = round_value(value_gripper)
      end
  
      return value_gripper_limited
  end
  
  def round_value(value):
      value_mod = value % 1
  
      if(value_mod < 0.5):
          return floor(value)
      else:
          return ceil(value)
      end
  end
  
  def round_value_2_dec(value):
      value_x_100 = value * 100
      value_x_100_rounded = round_value(value_x_100)
      return value_x_100_rounded / 100
  end
  
  def clear_socket_buffer(gripper_socket="1", read_timeout = 0.1):
      rq_comm_clear_socket_buffer_enabled[rq_socket_to_index(gripper_socket)] = True
  end
  
  def rq_gripper_id_to_ascii(gripper_id):
      if(gripper_id == "1"):
          return 57
      elif(gripper_id == "2"):
          return 50
      elif(gripper_id == "3"):
          return 51
      elif(gripper_id == "4"):
          return 52
      end
  end
  
  def scale(value, rawRange, scaledRange):
      def computeSlope(inputRange, outputRange):
          outputRangeDelta = outputRange[1] - outputRange[0]
          inputRangeDelta = inputRange[1] - inputRange[0]
  
          if (inputRangeDelta == 0):
              return 0
          else:
              return outputRangeDelta / inputRangeDelta
          end
      end
  
      def computeIntercept(slope, inputRange, outputRange):
          return outputRange[0] - (slope * inputRange[0])
      end
  
      def clipScaledValue(outputScaledValue, outputRange):
          if (outputRange[0] < outputRange[1]):
              return clipWhenLowerLimitIsLessThanHigher(outputScaledValue, outputRange)
          else:
              return clipWhenLowerLimitIsGreaterThanHigherLimit(outputScaledValue, outputRange)
          end
      end
  
      def clipWhenLowerLimitIsGreaterThanHigherLimit(outputScaledValue, outputRange):
          if (outputScaledValue < outputRange[1]):
              return outputRange[1]
          elif (outputScaledValue > outputRange[0]):
              return outputRange[0]
          else:
              return outputScaledValue
          end
      end
  
      def clipWhenLowerLimitIsLessThanHigher(outputScaledValue, outputRange):
          if (outputScaledValue < outputRange[0]):
              return outputRange[0]
          elif (outputScaledValue > outputRange[1]):
              return outputRange[1]
          else:
              return outputScaledValue
          end
      end
  
      slope = computeSlope(rawRange, scaledRange)
      intercept = computeIntercept(slope, rawRange, scaledRange)
      scaledValue = slope * value + intercept
      return clipScaledValue(scaledValue, scaledRange)
  end
  
  def limit(value, range):
      return scale(value, range, range)
  end
  
  
  rq_init_comm_if_connected(9, "1")
  rq_init_comm_if_connected(2, "2")
  rq_init_comm_if_connected(3, "3")
  rq_init_comm_if_connected(4, "4")
  rq_print_connected_grippers()
  rq_gripper_communication_thread = run rq_gripper_communication()
  set_closed_norm(100.0, 1)
  set_open_norm(0.0, 1)
  set_closed_mm(0.0, 1)
  set_open_mm(50.0, 1)
  set_closed_norm(100.0, 2)
  set_open_norm(0.0, 2)
  set_closed_mm(0.0, 2)
  set_open_mm(50.0, 2)
  set_closed_norm(100.0, 3)
  set_open_norm(0.0, 3)
  set_closed_mm(0.0, 3)
  set_open_mm(50.0, 3)
  set_closed_norm(100.0, 4)
  set_open_norm(0.0, 4)
  set_closed_mm(0.0, 4)
  set_open_mm(50.0, 4)
  rq_current_limit_enabled = False
  while(not rq_gripper_communication_thread_started):
      sleep(0.008)
  end
  # end: URCap Installation Node
  global Pallet_2_cnt_1=1
  global Pallet_2_cnt_2=1
  global Pallet_2_cnt_3=1
  global Pallet_2_cnt_4=1
  global Pallet_2_lct_1=1
  global Pallet_2_lct_2=1
  global Pallet_2_lct_3=1
  global Pallet_2_lct_4=1
  global Pallet_2_lno_1=1
  global Pallet_2_lno_2=1
  global Pallet_2_lno_3=1
  global Pallet_2_lno_4=1
  global Pallet_2_sep_1= False 
  global Pallet_2_sep_2= False 
  global Pallet_2_sep_3= False 
  global Pallet_2_sep_4= False 
  global Pallet_2_tct_1=1
  global Pallet_2_tct_2=1
  global Pallet_2_tct_3=1
  global Pallet_2_tct_4=1
  global qNearApproach=[0,0,0,0,0,0]
  global qNearApproach_1=[0,0,0,0,0,0]
  global qNearApproach_2=[0,0,0,0,0,0]
  global qNearApproach_3=[0,0,0,0,0,0]
  global Waypoint_2_p=p[.650372088383, -.024825573407, .459583695881, -2.155977950902, -.003564044501, -2.195060410911]
  global Waypoint_2_q=[2.6929147243499756, -1.455979013150074, 2.080142323170797, -3.79062618831777, -1.0774214903460901, 0.06153297424316406]
  global Approach_3_p=p[.520074732028, .072085675018, -.366178198518, -3.141141442139, -.015993045701, .000800228928]
  global Approach_3_q=[3.01974811661567, -0.3064810915156535, 1.8682591528036467, -3.1312589660915213, -1.5691905077779564, -0.1243908370132516]
  global ToolActionPoi_3_p=p[.520226808930, .071936160165, -.439816599331, 3.141509651492, .015551157237, .000010800254]
  global ToolActionPoi_3_q=[3.0193755310847417, -0.12816425437828016, 1.731690768787736, -3.1735772014550916, -1.5701632107747514, -0.1245725407514513]
  global Exit_4_p=p[.520222084434, .071947675694, -.339005616582, 3.141533763804, .015576258515, -.000002905735]
  global Exit_4_q=[3.019838414100354, -0.3737149607797843, 1.9111252639143406, -3.1074724585327385, -1.5693273149326439, -0.12408593055373274]
  global Approach_p=p[.330449183529, -.654703096913, .204316327050, 2.360052795568, -2.073562637373, .000028755474]
  global Approach_q=[1.8546287050781718, -0.9928203382985004, 1.1184495902776102, -1.6956799743559685, -1.5655632426026376, 0.15513640360781267]
  global ToolActionPoint_p=p[.145742456500, -.623712299717, .141843363677, -2.162912830491, 2.278464349849, .000016883461]
  global ToolActionPoint_q=[1.5898855751635477, -1.1757186147063745, 1.5621596749227233, -1.956496471638431, -1.5648401293648755, 0.0727379358217819]
  global Exit_1_p=p[.331325161566, -.654768474964, .200740241125, 2.310636152653, -2.073445831166, -.009738200388]
  global Exit_1_q=[1.8685552530852105, -0.9949201534669454, 1.1349761586330338, -1.7237545056573973, -1.6005016475520186, 0.18996717686507392]
  global Approach_2_p=p[.145733401653, -.623703454582, .193585536688, -2.162903567082, 2.278465356544, .000027020628]
  global Approach_2_q=[1.5899797799705029, -1.2148155356944166, 1.4783778555061227, -1.8336062644291857, -1.5649024823849214, 0.07210044080116873]
  global ToolActionPoi_2_p=p[.145742456500, -.623712299717, .141843363677, -2.162912830529, 2.278464349889, .000016883375]
  global ToolActionPoi_2_q=[1.5898855751635477, -1.1757186147063745, 1.5621596749227233, -1.956496471638431, -1.5648401293648755, 0.0727379358217819]
  global Exit_3_p=p[.332076615243, -.653505894932, .208569436899, 2.309715519359, -2.072020798012, -.009617473122]
  global Exit_3_q=[1.8705821705062053, -1.0000593784401826, 1.1232581200906404, -1.7077679387522178, -1.60190556039497, 0.19158517548891751]
  while (True):
    $ 2 "Robot Program"
    $ 3 "Home (Safe)"
    movej([2.6108886203843986, -1.7436725338397956, 2.3818854645957543, -3.705439314284151, -0.7462866217606265, 0.014831320530974253], a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: EnabledRobotics - ER-ABILITY, 5.0.0, Enabled Robotics ApS
    #   Type: ER-Ability
    $ 4 "ER-Ability"
    __er_thread_handle = 0
    daemon=rpc_factory("xmlrpc", "http://192.168.11.40:4568")
    daemon.set_init_status(0)
    HOST_IP = ""
    interpreter_mode(clearQueueOnEnter=False, clearOnEnd=False)
    if (not daemon.connect(HOST_IP)):
      textmsg("Failed to connect to ability")
      halt
    end
    thread __er_connection_watchdog():
      while (True):
        if (not daemon.watchdog()):
          textmsg("Lost connection to ability")
          halt
        end
        sleep(3.0)
      end
    end
    def sendError(errorMsg):
    daemon.send_error(errorMsg)
  end
  daemon.set_init_status(1)
  __er_watchdog_handle = run __er_connection_watchdog()
  interpreter_mode(clearQueueOnEnter=False, clearOnEnd=False)
  $ 5 "'Insert event nodes here'" "noBreak"
  # 'Insert event nodes here'
  # begin: URCap Program Node
  #   Source: EnabledRobotics - ER-ABILITY, 5.0.0, Enabled Robotics ApS
  #   Type: EventNode
  $ 6 "EventNode: calibrateFailed" "noBreak"
  def calibrateFailed_definition():
  $ 7 "Popup: Calibrate to maker failed, marker not present" "noBreak"
  popup("Calibrate to maker failed, marker not present", "Message", False, False, blocking=True)
  end
  thread calibrateFailed_thread():
  calibrateFailed_definition()
  daemon.done_executing()
  end
  def calibrateFailed():
  textmsg("Executing event: calibrateFailed")
  __er_thread_handle = run calibrateFailed_thread()
  end
  if (not daemon.register_method("calibrateFailed","[]", False)):
    textmsg("Failed to connect to register method calibrateFailed")
    halt
  end
  sync()
  # end: URCap Program Node
  # begin: URCap Program Node
  #   Source: EnabledRobotics - ER-ABILITY, 5.0.0, Enabled Robotics ApS
  #   Type: EventNode
  $ 8 "EventNode: Gripper_Activate" "noBreak"
  def Gripper_Activate_definition():
  # begin: URCap Program Node
  #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
  #   Type: Gripper Activate
  $ 9 "Gripper Activate" "noBreak"
  
  kill rq_gripper_communication_thread
  rq_gripper_communication_thread_started = False
  rq_close_gripper_socket("1")
  rq_close_gripper_socket("2")
  rq_close_gripper_socket("3")
  rq_close_gripper_socket("4")
  
  rq_init_comm_if_connected(9, "1")
  rq_init_comm_if_connected(2, "2")
  rq_init_comm_if_connected(3, "3")
  rq_init_comm_if_connected(4, "4")
  rq_print_connected_grippers()
  rq_gripper_communication_thread = run rq_gripper_communication()
  
  while(not rq_gripper_communication_thread_started):
      sleep(0.008)
  end
  
  rq_set_max_current_for_all_grippers()
  
  reset_and_activate = False
  
  rq_activate_all_grippers(False)
  # end: URCap Program Node
  end
  thread Gripper_Activate_thread():
  Gripper_Activate_definition()
  daemon.done_executing()
  end
  def Gripper_Activate():
  textmsg("Executing event: Gripper_Activate")
  __er_thread_handle = run Gripper_Activate_thread()
  end
  if (not daemon.register_method("Gripper_Activate","[]", False)):
    textmsg("Failed to connect to register method Gripper_Activate")
    halt
  end
  sync()
  # end: URCap Program Node
  # begin: URCap Program Node
  #   Source: EnabledRobotics - ER-ABILITY, 5.0.0, Enabled Robotics ApS
  #   Type: EventNode
  $ 10 "EventNode: Gripper_Open1" "noBreak"
  def Gripper_Open1_definition():
  # begin: URCap Program Node
  #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
  #   Type: Gripper
  $ 11 "Gripper Open (1)" "noBreak"
  if not(gripper_connected[0]):
    popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
  end
  if not(rq_is_gripper_activated("1")):
    popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
  end
  rq_set_pos_spd_for(0, 255, 0, "1")
  rq_wait_pos_spe_for_request(0, 255, 0, "1")
  rq_go_to("1")
  rq_wait("1")
  # end: URCap Program Node
  end
  thread Gripper_Open1_thread():
  Gripper_Open1_definition()
  daemon.done_executing()
  end
  def Gripper_Open1():
  textmsg("Executing event: Gripper_Open1")
  __er_thread_handle = run Gripper_Open1_thread()
  end
  if (not daemon.register_method("Gripper_Open1","[]", False)):
    textmsg("Failed to connect to register method Gripper_Open1")
    halt
  end
  sync()
  # end: URCap Program Node
  # begin: URCap Program Node
  #   Source: EnabledRobotics - ER-ABILITY, 5.0.0, Enabled Robotics ApS
  #   Type: EventNode
  $ 12 "EventNode: Gripper_Close" "noBreak"
  def Gripper_Close_definition():
  # begin: URCap Program Node
  #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
  #   Type: Gripper
  $ 13 "Gripper Close (1)" "noBreak"
  if not(gripper_connected[0]):
    popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
  end
  if not(rq_is_gripper_activated("1")):
    popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
  end
  rq_set_pos_spd_for(255, 255, 0, "1")
  rq_wait_pos_spe_for_request(255, 255, 0, "1")
  rq_go_to("1")
  rq_wait("1")
  # end: URCap Program Node
  end
  thread Gripper_Close_thread():
  Gripper_Close_definition()
  daemon.done_executing()
  end
  def Gripper_Close():
  textmsg("Executing event: Gripper_Close")
  __er_thread_handle = run Gripper_Close_thread()
  end
  if (not daemon.register_method("Gripper_Close","[]", False)):
    textmsg("Failed to connect to register method Gripper_Close")
    halt
  end
  sync()
  # end: URCap Program Node
  # begin: URCap Program Node
  #   Source: EnabledRobotics - ER-ABILITY, 5.0.0, Enabled Robotics ApS
  #   Type: EventNode
  $ 14 "EventNode: Unload" "noBreak"
  global __er_Unload_arg_pose = p[0, 0, 0, 0, 0, 0]
  def Unload_definition(arg_pose):
  $ 15 "Unload_ref≔__er_Unload_arg_pose" "noBreak"
  global Unload_ref=__er_Unload_arg_pose
  $ 16 "MoveJ" "noBreak"
  $ 17 "Waypoint_2" "noBreak"
  movej(get_inverse_kin(Waypoint_2_p, qnear=Waypoint_2_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 18 "Pallet_2" "noBreak"
  def Pallet_2_trans(pose):
  return p[pose[0], pose[1], pose[2], 0, 0, 0]
  end
  def Pallet_2_rot(pose):
  return p[0, 0, 0, pose[3], pose[4], pose[5]]
  end
  def Pallet_2_compute_pallet_waypoint(T_base_feature_taught, T_feature_referencePoint_taught, T_referencePoint_approach_taught, T_base_feature, T_base_referencePoint):
  local trans_referencePoint_approach_in_feature_taught = pose_sub(Pallet_2_trans(pose_trans(T_feature_referencePoint_taught, T_referencePoint_approach_taught)), Pallet_2_trans(T_feature_referencePoint_taught))
  local rot_referencePoint_approach_in_feature_taught = pose_trans(Pallet_2_rot(T_feature_referencePoint_taught), pose_trans(Pallet_2_rot(T_referencePoint_approach_taught), pose_inv(Pallet_2_rot(T_feature_referencePoint_taught))))
  T_feature_referencePoint = pose_trans(pose_inv(T_base_feature), T_base_referencePoint)
  rot_referencePoint_approach = pose_trans(pose_inv(Pallet_2_rot(T_feature_referencePoint)), pose_trans(rot_referencePoint_approach_in_feature_taught, Pallet_2_rot(T_feature_referencePoint)))
  T_feature_approach = pose_trans(trans_referencePoint_approach_in_feature_taught, pose_trans(T_feature_referencePoint, rot_referencePoint_approach))
  T_base_approach = pose_trans(T_base_feature, T_feature_approach)
  return T_base_approach
  end
  Pallet_2_tct_1 = 3
  if (Pallet_2_cnt_1 > 3 or Pallet_2_cnt_1 < 1):
    Pallet_2_cnt_1 = 1
  end
  $ 19 "Patterns" "noBreak"
  $ 20 "Line_Pattern_2" "noBreak"
  $ 23 "Layers" "noBreak"
  if (Pallet_2_cnt_1 < 4):
    Pallet_2_lno_1 = 1
    Pallet_2_lct_1 = Pallet_2_cnt_1
    global StartItem_2=pose_trans(p[0.0,0.0,0.0,0.0,0.0,0.0], pose_trans(p[-.000000000000, -.000000000000, -.000000000000, .000000000000, .000000000000, .000000000000], p[.520226808930, .071936160165, -.439816599331, 3.141509651494, .015551157232, .000010800258]))
    global EndItem_2=pose_trans(p[0.0,0.0,0.0,0.0,0.0,0.0], pose_trans(p[-.000000000000, -.000000000000, -.000000000000, .000000000000, .000000000000, .000000000000], p[.521976506042, -.107892547401, -.439624527362, 3.141328655500, .039596804554, -.000022510547]))
    referencePoint = interpolate_pose(StartItem_2, EndItem_2, (Pallet_2_lct_1 - 1)/2)
    if ((Pallet_2_lct_1 - 1) < 1.5):
      qNearApproach = [2.5448785455331526, 0.32353681292985914, 0.8867449467631632, -1.209835749483231, -0.6015755965885301, -3.1422033514088064]
    else:
      qNearApproach = [2.318553773487707, 0.5230815444746025, 0.3070377710571135, -0.8290774467610227, -0.8454805618969878, -3.143220671816902]
    end
    direction = p[0,0,1,0,0,0]
    referencePoint = pose_add (referencePoint,p[0.0*direction[0],0.0*direction[1],0.0*direction[2],0,0,0])
  end
  Approach_3_p = Pallet_2_compute_pallet_waypoint(p[0.0,0.0,0.0,0.0,0.0,0.0], pose_trans(pose_inv(p[0.0,0.0,0.0,0.0,0.0,0.0]), p[0.52022680893046,0.07193616016490022,-0.4398165993312858,3.1415096514942586,0.01555115723185833,1.080025776929912E-5]), p[-1.5009913569219435E-4,-1.4773289497117814E-4,-0.07363840846726544,4.5745872302844587E-4,-5.141193914981974E-4,-2.8251868715170223E-4], p[0.0,0.0,0.0,0.0,0.0,0.0], referencePoint)
  Approach_3_p = pose_trans(p[0.52022680893046,0.07193616016490022,-0.4398165993312858,3.141509651511718,0.015551157231944729,1.0800257734370728E-5], pose_trans(pose_inv(referencePoint), Approach_3_p))
  Approach_3_q = qNearApproach
  ToolActionPoi_3_p = Pallet_2_compute_pallet_waypoint(p[0.0,0.0,0.0,0.0,0.0,0.0], pose_trans(pose_inv(p[0.0,0.0,0.0,0.0,0.0,0.0]), p[0.52022680893046,0.07193616016490022,-0.4398165993312858,3.1415096514942586,0.01555115723185833,1.080025776929912E-5]), p[-1.1102230246251565E-16,1.3877787807814457E-17,0.0,0.0,0.0,0.0], p[0.0,0.0,0.0,0.0,0.0,0.0], referencePoint)
  ToolActionPoi_3_p = pose_trans(p[0.52022680893046,0.07193616016490022,-0.4398165993312858,3.141509651511718,0.015551157231944729,1.0800257734370728E-5], pose_trans(pose_inv(referencePoint), ToolActionPoi_3_p))
  Exit_4_p = Pallet_2_compute_pallet_waypoint(p[0.0,0.0,0.0,0.0,0.0,0.0], pose_trans(pose_inv(p[0.0,0.0,0.0,0.0,0.0,0.0]), p[0.52022680893046,0.07193616016490022,-0.4398165993312858,3.1415096514942586,0.01555115723185833,1.080025776929912E-5]), p[-3.93932843645306E-6,-7.071115271761741E-6,-0.10081098319262166,2.4279295122529868E-5,-8.605183831750915E-6,-1.5904010148868937E-5], p[0.0,0.0,0.0,0.0,0.0,0.0], referencePoint)
  Exit_4_p = pose_trans(p[0.52022680893046,0.07193616016490022,-0.4398165993312858,3.141509651511718,0.015551157231944729,1.0800257734370728E-5], pose_trans(pose_inv(referencePoint), Exit_4_p))
  $ 24 "At Each Item" "noBreak"
  $ 25 "Generated Movements" "noBreak"
  $ 26 "MoveJ" "noBreak"
  $ 27 "Approach_3" "noBreak"
  movej(get_inverse_kin(pose_trans(referencePoint, pose_trans(p[-.520910568349, .066801880452, -.439817090922, -3.141509651507, -.015551157232, -.000010800258], Approach_3_p)), qnear=Approach_3_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 28 "MoveL" "noBreak"
  $ 29 "ToolActionPoi_3" "noBreak"
  movel(pose_trans(referencePoint, pose_trans(p[-.520910568349, .066801880452, -.439817090922, -3.141509651507, -.015551157232, -.000010800258], ToolActionPoi_3_p)), a=1.2, v=0.25)
  $ 30 "Tool action" "noBreak"
  # begin: URCap Program Node
  #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
  #   Type: Gripper
  $ 31 "Gripper Close (1)" "noBreak"
  if not(gripper_connected[0]):
    popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
  end
  if not(rq_is_gripper_activated("1")):
    popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
  end
  rq_set_pos_spd_for(255, 255, 255, "1")
  rq_wait_pos_spe_for_request(255, 255, 255, "1")
  rq_go_to("1")
  rq_wait("1")
  # end: URCap Program Node
  $ 32 "MoveL" "noBreak"
  $ 33 "Exit_4" "noBreak"
  movel(pose_trans(referencePoint, pose_trans(p[-.520910568349, .066801880452, -.439817090922, -3.141509651507, -.015551157232, -.000010800258], Exit_4_p)), a=1.2, v=0.25)
  Pallet_2_sep_1 = False
  if (Pallet_2_cnt_1 >= 3):
    Pallet_2_cnt_1 = 1
  else:
    Pallet_2_cnt_1 = Pallet_2_cnt_1 + 1
  end
  $ 34 "MoveJ" "noBreak"
  $ 35 "Waypoint_2" "noBreak"
  movej(get_inverse_kin(Waypoint_2_p, qnear=Waypoint_2_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 36 "Pallet_1" "noBreak"
  def Pallet_1_trans(pose):
  return p[pose[0], pose[1], pose[2], 0, 0, 0]
  end
  def Pallet_1_rot(pose):
  return p[0, 0, 0, pose[3], pose[4], pose[5]]
  end
  def Pallet_1_compute_pallet_waypoint(T_base_feature_taught, T_feature_referencePoint_taught, T_referencePoint_approach_taught, T_base_feature, T_base_referencePoint):
  local trans_referencePoint_approach_in_feature_taught = pose_sub(Pallet_1_trans(pose_trans(T_feature_referencePoint_taught, T_referencePoint_approach_taught)), Pallet_1_trans(T_feature_referencePoint_taught))
  local rot_referencePoint_approach_in_feature_taught = pose_trans(Pallet_1_rot(T_feature_referencePoint_taught), pose_trans(Pallet_1_rot(T_referencePoint_approach_taught), pose_inv(Pallet_1_rot(T_feature_referencePoint_taught))))
  T_feature_referencePoint = pose_trans(pose_inv(T_base_feature), T_base_referencePoint)
  rot_referencePoint_approach = pose_trans(pose_inv(Pallet_1_rot(T_feature_referencePoint)), pose_trans(rot_referencePoint_approach_in_feature_taught, Pallet_1_rot(T_feature_referencePoint)))
  T_feature_approach = pose_trans(trans_referencePoint_approach_in_feature_taught, pose_trans(T_feature_referencePoint, rot_referencePoint_approach))
  T_base_approach = pose_trans(T_base_feature, T_feature_approach)
  return T_base_approach
  end
  Pallet_2_tct_2 = 3
  if (Pallet_2_cnt_2 > 3 or Pallet_2_cnt_2 < 1):
    Pallet_2_cnt_2 = 1
  end
  $ 37 "Patterns" "noBreak"
  $ 38 "Line_Pattern_1" "noBreak"
  $ 41 "Layers" "noBreak"
  if (Pallet_2_cnt_2 < 4):
    Pallet_2_lno_2 = 1
    Pallet_2_lct_2 = Pallet_2_cnt_2
    global StartItem_1=pose_trans(Unload_ref, pose_trans(p[-.592420775083, .276699022305, .196891037220, 2.141026582984, -2.289780745210, -.016012414057], p[.145742456500, -.623712299717, .141843363677, -2.162912830523, 2.278464349970, .000016883489]))
    global EndItem_1=pose_trans(Unload_ref, pose_trans(p[-.592420775083, .276699022305, .196891037220, 2.141026582984, -2.289780745210, -.016012414057], p[-.034366509976, -.616405446345, .140307709095, 2.162884038701, -2.278479638159, .000010711089]))
    referencePoin_1 = interpolate_pose(StartItem_1, EndItem_1, (Pallet_2_lct_2 - 1)/2)
    if ((Pallet_2_lct_2 - 1) < 1.5):
      qNearApproach_1 = [1.4717269593278084, -0.377092883754063, 1.1086358557351508, -4.010618644468483, 0.2053468506389249, 0.11347314803018159]
    else:
      qNearApproach_1 = [1.223852267476565, -0.3417190093073499, 1.0145159265446688, -3.879360012423625, 0.4524234852589557, 0.035990198425167035]
    end
    direction = pose_trans(p[0,0,0,Unload_ref[3],Unload_ref[4],Unload_ref[5]], p[0,0,1,0,0,0])
    referencePoin_1 = pose_add (referencePoin_1,p[0.0*direction[0],0.0*direction[1],0.0*direction[2],0,0,0])
  end
  Approach_p = Pallet_1_compute_pallet_waypoint(p[0.23673981765789284,-0.611972183808765,0.18903732227235456,-2.141026582984071,2.2897807452097325,0.016012414057338102], pose_trans(pose_inv(p[0.23673981765789284,-0.611972183808765,0.18903732227235456,-2.141026582984071,2.2897807452097325,0.016012414057338102]), p[0.14574245649996154,-0.6237122997166273,0.14184336367685696,-2.1629128305231067,2.278464349969941,1.688348907601959E-5]), p[0.0011206971510525632,0.0015926661309434986,-0.05760783126324068,0.031976489334781005,-0.019679141912164282,-0.020960074111678773], Unload_ref, referencePoin_1)
  Approach_p = pose_trans(p[0.3302161821107999,-0.6547625956979264,0.14667608988337466,2.3106327262625443,-2.073456813515827,-0.009785998864891442], pose_trans(pose_inv(referencePoin_1), Approach_p))
  Approach_q = qNearApproach_1
  ToolActionPoint_p = Pallet_1_compute_pallet_waypoint(p[0.23673981765789284,-0.611972183808765,0.18903732227235456,-2.141026582984071,2.2897807452097325,0.016012414057338102], pose_trans(pose_inv(p[0.23673981765789284,-0.611972183808765,0.18903732227235456,-2.141026582984071,2.2897807452097325,0.016012414057338102]), p[0.14574245649996154,-0.6237122997166273,0.14184336367685696,-2.1629128305231067,2.278464349969941,1.688348907601959E-5]), p[-0.05091451474589437,0.1798191171068455,0.009530418404298385,0.030088811758342437,-0.022546045786153587,0.16009642489347953], Unload_ref, referencePoin_1)
  ToolActionPoint_p = pose_trans(p[0.3302161821107999,-0.6547625956979264,0.14667608988337466,2.3106327262625443,-2.073456813515827,-0.009785998864891442], pose_trans(pose_inv(referencePoin_1), ToolActionPoint_p))
  Exit_1_p = Pallet_1_compute_pallet_waypoint(p[0.23673981765789284,-0.611972183808765,0.18903732227235456,-2.141026582984071,2.2897807452097325,0.016012414057338102], pose_trans(pose_inv(p[0.23673981765789284,-0.611972183808765,0.18903732227235456,-2.141026582984071,2.2897807452097325,0.016012414057338102]), p[0.14574245649996154,-0.6237122997166273,0.14184336367685696,-2.1629128305231067,2.278464349969941,1.688348907601959E-5]), p[0.0012088044817964994,6.156659549959032E-4,-0.05405850596043982,1.6947789472419606E-5,2.6304475016522655E-5,-6.152303689366298E-6], Unload_ref, referencePoin_1)
  Exit_1_p = pose_trans(p[0.3302161821107999,-0.6547625956979264,0.14667608988337466,2.3106327262625443,-2.073456813515827,-0.009785998864891442], pose_trans(pose_inv(referencePoin_1), Exit_1_p))
  $ 42 "At Each Item" "noBreak"
  $ 43 "Generated Movements" "noBreak"
  $ 44 "MoveJ" "noBreak"
  $ 45 "Approach" "noBreak"
  movej(get_inverse_kin(pose_trans(referencePoin_1, pose_trans(p[-.689448135507, .253081536651, .141002351928, -2.310632726263, 2.073456813516, .009785998865], Approach_p)), qnear=Approach_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 46 "MoveL" "noBreak"
  $ 47 "ToolActionPoint" "noBreak"
  movel(pose_trans(referencePoin_1, pose_trans(p[-.689448135507, .253081536651, .141002351928, -2.310632726263, 2.073456813516, .009785998865], ToolActionPoint_p)), a=1.2, v=0.25)
  $ 48 "Tool action" "noBreak"
  # begin: URCap Program Node
  #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
  #   Type: Gripper
  $ 49 "Gripper Open (1)" "noBreak"
  if not(gripper_connected[0]):
    popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
  end
  if not(rq_is_gripper_activated("1")):
    popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
  end
  rq_set_pos_spd_for(0, 255, 255, "1")
  rq_wait_pos_spe_for_request(0, 255, 255, "1")
  rq_go_to("1")
  rq_wait("1")
  # end: URCap Program Node
  $ 50 "MoveL" "noBreak"
  $ 51 "Exit_1" "noBreak"
  movel(pose_trans(referencePoin_1, pose_trans(p[-.689448135507, .253081536651, .141002351928, -2.310632726263, 2.073456813516, .009785998865], Exit_1_p)), a=1.2, v=0.25)
  Pallet_2_sep_2 = False
  if (Pallet_2_cnt_2 >= 3):
    Pallet_2_cnt_2 = 1
  else:
    Pallet_2_cnt_2 = Pallet_2_cnt_2 + 1
  end
  $ 52 "MoveJ" "noBreak"
  $ 53 "Waypoint_2" "noBreak"
  movej(get_inverse_kin(Waypoint_2_p, qnear=Waypoint_2_q), a=1.3962634015954636, v=1.0471975511965976)
  end
  thread Unload_thread():
  Unload_definition(__er_Unload_arg_pose)
  daemon.done_executing()
  end
  def Unload(arg_pose):
  textmsg("Executing event: Unload, with arguments:")
  textmsg("Argument: arg_pose = ", arg_pose)
  __er_Unload_arg_pose = arg_pose
  __er_thread_handle = run Unload_thread()
  end
  if (not daemon.register_method("Unload","[pose]", False)):
    textmsg("Failed to connect to register method Unload")
    halt
  end
  sync()
  # end: URCap Program Node
  # begin: URCap Program Node
  #   Source: EnabledRobotics - ER-ABILITY, 5.0.0, Enabled Robotics ApS
  #   Type: EventNode
  $ 54 "EventNode: Palletize" "noBreak"
  global __er_Palletize_arg_pose = p[0, 0, 0, 0, 0, 0]
  def Palletize_definition(arg_pose):
  $ 55 "Pallet_ref≔__er_Palletize_arg_pose" "noBreak"
  global Pallet_ref=__er_Palletize_arg_pose
  $ 56 "MoveJ" "noBreak"
  $ 58 "Waypoint_2" "noBreak"
  movej(get_inverse_kin(Waypoint_2_p, qnear=Waypoint_2_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 59 "Pallet_3" "noBreak"
  def Pallet_3_trans(pose):
  return p[pose[0], pose[1], pose[2], 0, 0, 0]
  end
  def Pallet_3_rot(pose):
  return p[0, 0, 0, pose[3], pose[4], pose[5]]
  end
  def Pallet_3_compute_pallet_waypoint(T_base_feature_taught, T_feature_referencePoint_taught, T_referencePoint_approach_taught, T_base_feature, T_base_referencePoint):
  local trans_referencePoint_approach_in_feature_taught = pose_sub(Pallet_3_trans(pose_trans(T_feature_referencePoint_taught, T_referencePoint_approach_taught)), Pallet_3_trans(T_feature_referencePoint_taught))
  local rot_referencePoint_approach_in_feature_taught = pose_trans(Pallet_3_rot(T_feature_referencePoint_taught), pose_trans(Pallet_3_rot(T_referencePoint_approach_taught), pose_inv(Pallet_3_rot(T_feature_referencePoint_taught))))
  T_feature_referencePoint = pose_trans(pose_inv(T_base_feature), T_base_referencePoint)
  rot_referencePoint_approach = pose_trans(pose_inv(Pallet_3_rot(T_feature_referencePoint)), pose_trans(rot_referencePoint_approach_in_feature_taught, Pallet_3_rot(T_feature_referencePoint)))
  T_feature_approach = pose_trans(trans_referencePoint_approach_in_feature_taught, pose_trans(T_feature_referencePoint, rot_referencePoint_approach))
  T_base_approach = pose_trans(T_base_feature, T_feature_approach)
  return T_base_approach
  end
  Pallet_2_tct_3 = 3
  if (Pallet_2_cnt_3 > 3 or Pallet_2_cnt_3 < 1):
    Pallet_2_cnt_3 = 1
  end
  $ 60 "Patterns" "noBreak"
  $ 61 "Line_Pattern_5" "noBreak"
  $ 64 "Layers" "noBreak"
  if (Pallet_2_cnt_3 < 4):
    Pallet_2_lno_3 = 1
    Pallet_2_lct_3 = Pallet_2_cnt_3
    global StartItem_5=pose_trans(Pallet_ref, pose_trans(p[-.592420775083, .276699022305, .196891037220, 2.141026582984, -2.289780745210, -.016012414057], p[.145742456500, -.623712299717, .141843363677, -2.162912830523, 2.278464349970, .000016883489]))
    global EndItem_5=pose_trans(Pallet_ref, pose_trans(p[-.592420775083, .276699022305, .196891037220, 2.141026582984, -2.289780745210, -.016012414057], p[-.034364587449, -.616414812009, .134803893258, 2.162884771053, -2.278474941594, .000025529303]))
    referencePoin_6 = interpolate_pose(StartItem_5, EndItem_5, (Pallet_2_lct_3 - 1)/2)
    if ((Pallet_2_lct_3 - 1) < 1.5):
      qNearApproach_2 = [1.160836153948624, -0.48475985649287523, 1.429198472833832, -4.07612878433148, 0.3533404294143797, -0.011125824810111595]
    else:
      qNearApproach_2 = [0.9092989459402957, -0.3906363918532989, 1.217352351317741, -3.9632834025255583, 0.6055194004184299, -0.00720924811746837]
    end
    direction = pose_trans(p[0,0,0,Pallet_ref[3],Pallet_ref[4],Pallet_ref[5]], p[0,0,1,0,0,0])
    referencePoin_6 = pose_add (referencePoin_6,p[0.0*direction[0],0.0*direction[1],0.0*direction[2],0,0,0])
  end
  Approach_2_p = Pallet_3_compute_pallet_waypoint(p[0.23673981765789284,-0.611972183808765,0.18903732227235456,-2.141026582984071,2.2897807452097325,0.016012414057338102], pose_trans(pose_inv(p[0.23673981765789284,-0.611972183808765,0.18903732227235456,-2.141026582984071,2.2897807452097325,0.016012414057338102]), p[0.14574245649996154,-0.6237122997166273,0.14184336367685696,-2.1629128305231067,2.278464349969941,1.688348907601959E-5]), p[-8.821036119655012E-6,9.83391916484222E-6,-0.05174217287322935,-7.92077343834213E-7,-8.53904463359664E-6,4.718218270382111E-6], Pallet_ref, referencePoin_6)
  Approach_2_p = pose_trans(p[0.14574245649996245,-0.6237122997166271,0.14184336367685513,-2.162912830525248,2.2784643499679076,1.6883689364664383E-5], pose_trans(pose_inv(referencePoin_6), Approach_2_p))
  Approach_2_q = qNearApproach_2
  ToolActionPoi_2_p = Pallet_3_compute_pallet_waypoint(p[0.23673981765789284,-0.611972183808765,0.18903732227235456,-2.141026582984071,2.2897807452097325,0.016012414057338102], pose_trans(pose_inv(p[0.23673981765789284,-0.611972183808765,0.18903732227235456,-2.141026582984071,2.2897807452097325,0.016012414057338102]), p[0.14574245649996154,-0.6237122997166273,0.14184336367685696,-2.1629128305231067,2.278464349969941,1.688348907601959E-5]), p[2.220446049250313E-16,9.159339953157541E-16,-1.8318679906315083E-15,0.0,0.0,0.0], Pallet_ref, referencePoin_6)
  ToolActionPoi_2_p = pose_trans(p[0.14574245649996245,-0.6237122997166271,0.14184336367685513,-2.162912830525248,2.2784643499679076,1.6883689364664383E-5], pose_trans(pose_inv(referencePoin_6), ToolActionPoi_2_p))
  Exit_3_p = Pallet_3_compute_pallet_waypoint(p[0.23673981765789284,-0.611972183808765,0.18903732227235456,-2.141026582984071,2.2897807452097325,0.016012414057338102], pose_trans(pose_inv(p[0.23673981765789284,-0.611972183808765,0.18903732227235456,-2.141026582984071,2.2897807452097325,0.016012414057338102]), p[0.14574245649996154,-0.6237122997166273,0.14184336367685696,-2.1629128305231067,2.278464349969941,1.688348907601959E-5]), p[-4.6349033265835615E-6,6.324703609672522E-6,-0.06181962181018885,-2.875197051692597E-6,-4.847655252132371E-5,1.897897991802547E-5], Pallet_ref, referencePoin_6)
  Exit_3_p = pose_trans(p[0.33020295134031996,-0.6550358453350454,0.14679715883248884,2.3097137152461533,-2.071977896073306,-0.009558990049756003], pose_trans(pose_inv(referencePoin_6), Exit_3_p))
  $ 65 "At Each Item" "noBreak"
  $ 66 "Generated Movements" "noBreak"
  $ 67 "MoveJ" "noBreak"
  $ 68 "Approach_2" "noBreak"
  movej(get_inverse_kin(pose_trans(referencePoin_6, pose_trans(p[-.615288801215, .177976730796, .141849958260, 2.162912830677, -2.278464350127, -.000016883689], Approach_2_p)), qnear=Approach_2_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 69 "MoveL" "noBreak"
  $ 70 "ToolActionPoi_2" "noBreak"
  movel(pose_trans(referencePoin_6, pose_trans(p[-.615288801215, .177976730796, .141849958260, 2.162912830677, -2.278464350127, -.000016883689], ToolActionPoi_2_p)), a=1.2, v=0.25)
  $ 71 "Tool action" "noBreak"
  # begin: URCap Program Node
  #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
  #   Type: Gripper
  $ 72 "Gripper Close (1)" "noBreak"
  if not(gripper_connected[0]):
    popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
  end
  if not(rq_is_gripper_activated("1")):
    popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
  end
  rq_set_pos_spd_for(255, 153, 56, "1")
  rq_wait_pos_spe_for_request(255, 153, 56, "1")
  rq_go_to("1")
  rq_wait("1")
  # end: URCap Program Node
  $ 73 "MoveL" "noBreak"
  $ 74 "Exit_3" "noBreak"
  movel(pose_trans(referencePoin_6, pose_trans(p[-.689971033309, .252662774639, .140559059103, -2.309713715246, 2.071977896073, .009558990050], Exit_3_p)), a=1.2, v=0.25)
  Pallet_2_sep_3 = False
  if (Pallet_2_cnt_3 >= 3):
    Pallet_2_cnt_3 = 1
  else:
    Pallet_2_cnt_3 = Pallet_2_cnt_3 + 1
  end
  $ 75 "MoveJ" "noBreak"
  $ 76 "Waypoint_2" "noBreak"
  movej(get_inverse_kin(Waypoint_2_p, qnear=Waypoint_2_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 77 "Pallet_4" "noBreak"
  def Pallet_4_trans(pose):
  return p[pose[0], pose[1], pose[2], 0, 0, 0]
  end
  def Pallet_4_rot(pose):
  return p[0, 0, 0, pose[3], pose[4], pose[5]]
  end
  def Pallet_4_compute_pallet_waypoint(T_base_feature_taught, T_feature_referencePoint_taught, T_referencePoint_approach_taught, T_base_feature, T_base_referencePoint):
  local trans_referencePoint_approach_in_feature_taught = pose_sub(Pallet_4_trans(pose_trans(T_feature_referencePoint_taught, T_referencePoint_approach_taught)), Pallet_4_trans(T_feature_referencePoint_taught))
  local rot_referencePoint_approach_in_feature_taught = pose_trans(Pallet_4_rot(T_feature_referencePoint_taught), pose_trans(Pallet_4_rot(T_referencePoint_approach_taught), pose_inv(Pallet_4_rot(T_feature_referencePoint_taught))))
  T_feature_referencePoint = pose_trans(pose_inv(T_base_feature), T_base_referencePoint)
  rot_referencePoint_approach = pose_trans(pose_inv(Pallet_4_rot(T_feature_referencePoint)), pose_trans(rot_referencePoint_approach_in_feature_taught, Pallet_4_rot(T_feature_referencePoint)))
  T_feature_approach = pose_trans(trans_referencePoint_approach_in_feature_taught, pose_trans(T_feature_referencePoint, rot_referencePoint_approach))
  T_base_approach = pose_trans(T_base_feature, T_feature_approach)
  return T_base_approach
  end
  Pallet_2_tct_4 = 3
  if (Pallet_2_cnt_4 > 3 or Pallet_2_cnt_4 < 1):
    Pallet_2_cnt_4 = 1
  end
  $ 78 "Patterns" "noBreak"
  $ 79 "Line_Pattern_6" "noBreak"
  $ 82 "Layers" "noBreak"
  if (Pallet_2_cnt_4 < 4):
    Pallet_2_lno_4 = 1
    Pallet_2_lct_4 = Pallet_2_cnt_4
    global StartItem_6=pose_trans(p[0.0,0.0,0.0,0.0,0.0,0.0], pose_trans(p[-.000000000000, -.000000000000, -.000000000000, .000000000000, .000000000000, .000000000000], p[.520226808930, .071936160165, -.439816599331, 3.141509651494, .015551157232, .000010800258]))
    global EndItem_6=pose_trans(p[0.0,0.0,0.0,0.0,0.0,0.0], pose_trans(p[-.000000000000, -.000000000000, -.000000000000, .000000000000, .000000000000, .000000000000], p[.521976506042, -.107892547401, -.439624527362, 3.141328655500, .039596804554, -.000022510547]))
    referencePoin_7 = interpolate_pose(StartItem_6, EndItem_6, (Pallet_2_lct_4 - 1)/2)
    if ((Pallet_2_lct_4 - 1) < 1.5):
      qNearApproach_3 = [2.5448785455331526, 0.32353681292985914, 0.8867449467631632, -1.209835749483231, -0.6015755965885301, -3.1422033514088064]
    else:
      qNearApproach_3 = [2.318553773487707, 0.5230815444746025, 0.3070377710571135, -0.8290774467610227, -0.8454805618969878, -3.143220671816902]
    end
    direction = p[0,0,1,0,0,0]
    referencePoin_7 = pose_add (referencePoin_7,p[0.0*direction[0],0.0*direction[1],0.0*direction[2],0,0,0])
  end
  Approach_3_p = Pallet_4_compute_pallet_waypoint(p[0.0,0.0,0.0,0.0,0.0,0.0], pose_trans(pose_inv(p[0.0,0.0,0.0,0.0,0.0,0.0]), p[0.52022680893046,0.07193616016490022,-0.4398165993312858,3.1415096514942586,0.01555115723185833,1.080025776929912E-5]), p[-1.5009913569219435E-4,-1.4773289497117814E-4,-0.07363840846726544,4.5745872302844587E-4,-5.141193914981974E-4,-2.8251868715170223E-4], p[0.0,0.0,0.0,0.0,0.0,0.0], referencePoin_7)
  Approach_3_p = pose_trans(p[0.52022680893046,0.07193616016490022,-0.4398165993312858,3.141509651511718,0.015551157231944729,1.0800257734370728E-5], pose_trans(pose_inv(referencePoin_7), Approach_3_p))
  Approach_3_q = qNearApproach_3
  ToolActionPoi_3_p = Pallet_4_compute_pallet_waypoint(p[0.0,0.0,0.0,0.0,0.0,0.0], pose_trans(pose_inv(p[0.0,0.0,0.0,0.0,0.0,0.0]), p[0.52022680893046,0.07193616016490022,-0.4398165993312858,3.1415096514942586,0.01555115723185833,1.080025776929912E-5]), p[-1.1102230246251565E-16,1.3877787807814457E-17,0.0,0.0,0.0,0.0], p[0.0,0.0,0.0,0.0,0.0,0.0], referencePoin_7)
  ToolActionPoi_3_p = pose_trans(p[0.52022680893046,0.07193616016490022,-0.4398165993312858,3.141509651511718,0.015551157231944729,1.0800257734370728E-5], pose_trans(pose_inv(referencePoin_7), ToolActionPoi_3_p))
  Exit_4_p = Pallet_4_compute_pallet_waypoint(p[0.0,0.0,0.0,0.0,0.0,0.0], pose_trans(pose_inv(p[0.0,0.0,0.0,0.0,0.0,0.0]), p[0.52022680893046,0.07193616016490022,-0.4398165993312858,3.1415096514942586,0.01555115723185833,1.080025776929912E-5]), p[-3.93932843645306E-6,-7.071115271761741E-6,-0.10081098319262166,2.4279295122529868E-5,-8.605183831750915E-6,-1.5904010148868937E-5], p[0.0,0.0,0.0,0.0,0.0,0.0], referencePoin_7)
  Exit_4_p = pose_trans(p[0.52022680893046,0.07193616016490022,-0.4398165993312858,3.141509651511718,0.015551157231944729,1.0800257734370728E-5], pose_trans(pose_inv(referencePoin_7), Exit_4_p))
  $ 83 "At Each Item" "noBreak"
  $ 84 "Generated Movements" "noBreak"
  $ 85 "MoveJ" "noBreak"
  $ 86 "Approach_3" "noBreak"
  movej(get_inverse_kin(pose_trans(referencePoin_7, pose_trans(p[-.520910568349, .066801880452, -.439817090922, -3.141509651507, -.015551157232, -.000010800258], Approach_3_p)), qnear=Approach_3_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 87 "MoveL" "noBreak"
  $ 88 "ToolActionPoi_3" "noBreak"
  movel(pose_trans(referencePoin_7, pose_trans(p[-.520910568349, .066801880452, -.439817090922, -3.141509651507, -.015551157232, -.000010800258], ToolActionPoi_3_p)), a=1.2, v=0.25)
  $ 89 "Tool action" "noBreak"
  # begin: URCap Program Node
  #   Source: Robotiq_Grippers, 1.8.13.22852, Robotiq Inc.
  #   Type: Gripper
  $ 90 "Gripper Open (1)" "noBreak"
  if not(gripper_connected[0]):
    popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
  end
  if not(rq_is_gripper_activated("1")):
    popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
  end
  rq_set_pos_spd_for(0, 153, 56, "1")
  rq_wait_pos_spe_for_request(0, 153, 56, "1")
  rq_go_to("1")
  rq_wait("1")
  # end: URCap Program Node
  $ 91 "MoveL" "noBreak"
  $ 92 "Exit_4" "noBreak"
  movel(pose_trans(referencePoin_7, pose_trans(p[-.520910568349, .066801880452, -.439817090922, -3.141509651507, -.015551157232, -.000010800258], Exit_4_p)), a=1.2, v=0.25)
  Pallet_2_sep_4 = False
  if (Pallet_2_cnt_4 >= 3):
    Pallet_2_cnt_4 = 1
  else:
    Pallet_2_cnt_4 = Pallet_2_cnt_4 + 1
  end
  $ 93 "MoveJ" "noBreak"
  $ 94 "Waypoint_2" "noBreak"
  movej(get_inverse_kin(Waypoint_2_p, qnear=Waypoint_2_q), a=1.3962634015954636, v=1.0471975511965976)
  end
  thread Palletize_thread():
  Palletize_definition(__er_Palletize_arg_pose)
  daemon.done_executing()
  end
  def Palletize(arg_pose):
  textmsg("Executing event: Palletize, with arguments:")
  textmsg("Argument: arg_pose = ", arg_pose)
  __er_Palletize_arg_pose = arg_pose
  __er_thread_handle = run Palletize_thread()
  end
  if (not daemon.register_method("Palletize","[pose]", False)):
    textmsg("Failed to connect to register method Palletize")
    halt
  end
  sync()
  # end: URCap Program Node
  daemon.end_method_registration()
  daemon.set_init_status(2)
  interpreter_mode(clearQueueOnEnter=False)
  # end: URCap Program Node
  end
end
